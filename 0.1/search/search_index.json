{"config": {"indexing": "full", "lang": ["en"], "min_search_length": 3, "prebuild_index": false, "separator": "[\\s\\-]+"}, "docs": [{"location": "", "text": "Element Animal \u00b6 DataJoint Element for storing animal meta data and genotype information. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline. element-animal features a DataJoint pipeline design for subject and genotyping management. element-animal is not a complete workflow by itself, but rather a modular design of tables and dependencies. element-animal can be flexibly attached to any DataJoint workflow. Visit the Concepts page for more information on pose estimation and Element DeepLabCut. To get started with building your data pipeline visit the Tutorials page .", "title": "Element Animal"}, {"location": "#element-animal", "text": "DataJoint Element for storing animal meta data and genotype information. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline. element-animal features a DataJoint pipeline design for subject and genotyping management. element-animal is not a complete workflow by itself, but rather a modular design of tables and dependencies. element-animal can be flexibly attached to any DataJoint workflow. Visit the Concepts page for more information on pose estimation and Element DeepLabCut. To get started with building your data pipeline visit the Tutorials page .", "title": "Element Animal"}, {"location": "changelog/", "text": "Changelog \u00b6 Observes Semantic Versioning standard and Keep a Changelog convention. 0.1.4 - 2022-08-30 \u00b6 Added - \"subject_nickname\" into Subject table Update - rework \"SubjectCull\" table 0.1.3 - 2022-07-06 \u00b6 Update - Diagram links for PyPI README 0.1.2 - 2022-06-27 \u00b6 Add - Code of Conduct Update - pull subject from parent directory in nwb export Update - for genotyping.BreedingPair part tables, projection from Subject genotyping.BreedingPair.Mother, change attribute to 'mother' genotyping.BreedingPair.Father, change attribute to 'father' 0.1.1 - 2022-05-10 \u00b6 Add - NWB export Update - Shorten subject primary key to varchar(8) Add - Adopt black formatting into code base 0.1.0b0 - 2021-05-07 \u00b6 Update - First beta release 0.1.0a1 - 2021-05-03 \u00b6 Add - GitHub Action release process Add - subject schema Add - genotyping schema", "title": "Changelog"}, {"location": "changelog/#changelog", "text": "Observes Semantic Versioning standard and Keep a Changelog convention.", "title": "Changelog"}, {"location": "changelog/#014-2022-08-30", "text": "Added - \"subject_nickname\" into Subject table Update - rework \"SubjectCull\" table", "title": "0.1.4 - 2022-08-30"}, {"location": "changelog/#013-2022-07-06", "text": "Update - Diagram links for PyPI README", "title": "0.1.3 - 2022-07-06"}, {"location": "changelog/#012-2022-06-27", "text": "Add - Code of Conduct Update - pull subject from parent directory in nwb export Update - for genotyping.BreedingPair part tables, projection from Subject genotyping.BreedingPair.Mother, change attribute to 'mother' genotyping.BreedingPair.Father, change attribute to 'father'", "title": "0.1.2 - 2022-06-27"}, {"location": "changelog/#011-2022-05-10", "text": "Add - NWB export Update - Shorten subject primary key to varchar(8) Add - Adopt black formatting into code base", "title": "0.1.1 - 2022-05-10"}, {"location": "changelog/#010b0-2021-05-07", "text": "Update - First beta release", "title": "0.1.0b0 - 2021-05-07"}, {"location": "changelog/#010a1-2021-05-03", "text": "Add - GitHub Action release process Add - subject schema Add - genotyping schema", "title": "0.1.0a1 - 2021-05-03"}, {"location": "citation/", "text": "Citation \u00b6 If your work uses DataJoint and DataJoint Elements, please cite the respective Research Resource Identifiers (RRIDs) and manuscripts. DataJoint for Python or MATLAB + Yatsenko D, Reimer J, Ecker AS, Walker EY, Sinz F, Berens P, Hoenselaar A, Cotton RJ, Siapas AS, Tolias AS. DataJoint: managing big scientific data using MATLAB or Python. bioRxiv. 2015 Jan 1:031658. doi: https://doi.org/10.1101/031658 + DataJoint ( RRID:SCR_014543 ) - DataJoint for <Select Python or MATLAB> (version <Enter version number> ) DataJoint Elements + Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 + DataJoint Elements ( RRID:SCR_021894 ) - Element Animal (version 0.1.4)", "title": "Citation"}, {"location": "citation/#citation", "text": "If your work uses DataJoint and DataJoint Elements, please cite the respective Research Resource Identifiers (RRIDs) and manuscripts. DataJoint for Python or MATLAB + Yatsenko D, Reimer J, Ecker AS, Walker EY, Sinz F, Berens P, Hoenselaar A, Cotton RJ, Siapas AS, Tolias AS. DataJoint: managing big scientific data using MATLAB or Python. bioRxiv. 2015 Jan 1:031658. doi: https://doi.org/10.1101/031658 + DataJoint ( RRID:SCR_014543 ) - DataJoint for <Select Python or MATLAB> (version <Enter version number> ) DataJoint Elements + Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 + DataJoint Elements ( RRID:SCR_021894 ) - Element Animal (version 0.1.4)", "title": "Citation"}, {"location": "concepts/", "text": "Concepts \u00b6 Usage of animal subjects in neuroscience \u00b6 Many data pipelines in neuroscience retain information about the experimental subjects (e.g., date of birth, sex). For animal models, this can also include owner, cage and sacrificing information. Many researchers also retain genotyping information (e.g., line, zygosity). Labs that perform their own genotyping need to keep track of even more information, such as breeding pairs, litters, and genotyping tests. Element Animal can help researchers organize all this information in connection with a broader experimental pipeline. Key Partnerships \u00b6 Over the past few years, several labs have developed DataJoint-based pipelines for animal management. Our team collaborated with several of them during their projects. Additionally, we interviewed these teams to understand their experiment workflow, associated tools, and interfaces. These teams include: International Brain Laboratory BrainCoGs (Princeton Neuroscience Institute) ( Python / MATLAB ) MoC3 (Columbia Zuckerman Institute) + Costa Lab (private repository) + Hillman Lab Through our interviews and direct collaboration with the precursor projects, we identified the common motifs in the animal subject schemas to create the Animal Management Element. This element works for diverse downstream pipelines and is always used in combination with other elements for specific experiments. As such it is validated jointly with the processing elements such as the Array Ephys Element and Calcium Imaging Element. Element architecture \u00b6 There are two modules in element-animal : subject: contains the basic information of subject, including Strain, Line, Subject, Zygosity, and SubjectDeath information genotyping: this module is designed for labs that keep track of colony management and genotyping results, containing information of breeding, weaning, housing, and genotyping. Subject Diagram \u00b6 Genotyping Diagram \u00b6 subject schema ( API docs ) \u00b6 Although not required, most choose to connect the Session table to a Subject table. Table Description Strain Genetic strain of an animal. (e.g. C57Bl/6) Allele Store allele information Line Genetic line Subject Animal subject information SubjectDeath Subject death information SubjectCull Subject culling information Zygosity Information about zygosity of a subject genotyping schema ( API docs ) \u00b6 Table Description Sequence Gene sequence information AlleleSequence Allele sequence information BreedingPair Information about male-female pair used for breeding Litter Information about litter (group of animals born to a breeding pair) Weaning Information about weaning (maternal separation) SubjectLitter Subject and its litter Cage Cage information SubjectCaging Information about subject and its cage. GenotypeTest Information about genotype test", "title": "Concepts"}, {"location": "concepts/#concepts", "text": "", "title": "Concepts"}, {"location": "concepts/#usage-of-animal-subjects-in-neuroscience", "text": "Many data pipelines in neuroscience retain information about the experimental subjects (e.g., date of birth, sex). For animal models, this can also include owner, cage and sacrificing information. Many researchers also retain genotyping information (e.g., line, zygosity). Labs that perform their own genotyping need to keep track of even more information, such as breeding pairs, litters, and genotyping tests. Element Animal can help researchers organize all this information in connection with a broader experimental pipeline.", "title": "Usage of animal subjects in neuroscience"}, {"location": "concepts/#key-partnerships", "text": "Over the past few years, several labs have developed DataJoint-based pipelines for animal management. Our team collaborated with several of them during their projects. Additionally, we interviewed these teams to understand their experiment workflow, associated tools, and interfaces. These teams include: International Brain Laboratory BrainCoGs (Princeton Neuroscience Institute) ( Python / MATLAB ) MoC3 (Columbia Zuckerman Institute) + Costa Lab (private repository) + Hillman Lab Through our interviews and direct collaboration with the precursor projects, we identified the common motifs in the animal subject schemas to create the Animal Management Element. This element works for diverse downstream pipelines and is always used in combination with other elements for specific experiments. As such it is validated jointly with the processing elements such as the Array Ephys Element and Calcium Imaging Element.", "title": "Key Partnerships"}, {"location": "concepts/#element-architecture", "text": "There are two modules in element-animal : subject: contains the basic information of subject, including Strain, Line, Subject, Zygosity, and SubjectDeath information genotyping: this module is designed for labs that keep track of colony management and genotyping results, containing information of breeding, weaning, housing, and genotyping.", "title": "Element architecture"}, {"location": "concepts/#subject-diagram", "text": "", "title": "Subject Diagram"}, {"location": "concepts/#genotyping-diagram", "text": "", "title": "Genotyping Diagram"}, {"location": "concepts/#subject-schema-api-docs", "text": "Although not required, most choose to connect the Session table to a Subject table. Table Description Strain Genetic strain of an animal. (e.g. C57Bl/6) Allele Store allele information Line Genetic line Subject Animal subject information SubjectDeath Subject death information SubjectCull Subject culling information Zygosity Information about zygosity of a subject", "title": "subject schema (API docs)"}, {"location": "concepts/#genotyping-schema-api-docs", "text": "Table Description Sequence Gene sequence information AlleleSequence Allele sequence information BreedingPair Information about male-female pair used for breeding Litter Information about litter (group of animals born to a breeding pair) Weaning Information about weaning (maternal separation) SubjectLitter Subject and its litter Cage Cage information SubjectCaging Information about subject and its cage. GenotypeTest Information about genotype test", "title": "genotyping schema (API docs)"}, {"location": "tutorials/", "text": "Tutorials \u00b6 Coming soon!", "title": "Tutorials"}, {"location": "tutorials/#tutorials", "text": "Coming soon!", "title": "Tutorials"}, {"location": "api/element_animal/genotyping/", "text": "activate ( genotyping_schema_name , subject_schema_name = None , create_schema = True , create_tables = True , linking_module = None ) \u00b6 Activate this schema. Parameters: Name Type Description Default genotyping_schema_name str schema name on the database server to activate the genotyping element. required subject_schema_name str schema name on the database server to activate the subject element None create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables bool when True (default), create tables in the database if they do not yet exist. True linking_module bool a module name or a module containing the None required dependencies to activate the `subject` element required Dependencies: Upstream tables Source: The source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX). Lab: The lab for which a particular animal belongs to. Protocol: The protocol applicable to a particular animal (e.g. IACUC, IRB). User: The user associated with a particular animal. Source code in element_animal/genotyping.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def activate ( genotyping_schema_name , subject_schema_name = None , create_schema = True , create_tables = True , linking_module = None , ): \"\"\"Activate this schema. Args: genotyping_schema_name (str): schema name on the database server to activate the `genotyping` element. subject_schema_name (str): schema name on the database server to activate the `subject` element create_schema (bool, optional): when True (default), create schema in the database if it does not yet exist. create_tables (bool, optional): when True (default), create tables in the database if they do not yet exist. linking_module (bool, optional): a module name or a module containing the required dependencies to activate the `subject` element: Dependencies: Upstream tables: Source: The source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX). Lab: The lab for which a particular animal belongs to. Protocol: The protocol applicable to a particular animal (e.g. IACUC, IRB). User: The user associated with a particular animal. \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must \" + \"be a module's name or a module\" ) subject . activate ( subject_schema_name , create_schema = create_schema , create_tables = create_tables , linking_module = linking_module , ) schema . activate ( genotyping_schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , ) Sequence \u00b6 Bases: dj . Lookup Gene sequence information. Attributes: Name Type Description sequence varchar(32) Abbreviated sequence name base_pairs varchar(1024) Base pairs sequence_desc varchar(255) Description Source code in element_animal/genotyping.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @schema class Sequence ( dj . Lookup ): \"\"\"Gene sequence information. Attributes: sequence ( varchar(32) ): Abbreviated sequence name base_pairs ( varchar(1024) ): Base pairs sequence_desc ( varchar(255) ): Description \"\"\" definition = \"\"\" sequence : varchar(32) # abbreviated sequence name --- base_pairs='' : varchar(1024) # base pairs sequence_desc='' : varchar(255) # description \"\"\" AlleleSequence \u00b6 Bases: dj . Lookup Allele sequence information. Attributes: Name Type Description subject.Allele foreign key subject.Allele key. Sequence varchar(1024) Sequence key. Source code in element_animal/genotyping.py 77 78 79 80 81 82 83 84 85 86 87 88 89 @schema class AlleleSequence ( dj . Lookup ): \"\"\"Allele sequence information. Attributes: subject.Allele (foreign key): subject.Allele key. Sequence ( varchar(1024) ): Sequence key. \"\"\" definition = \"\"\" -> subject.Allele -> Sequence \"\"\" BreedingPair \u00b6 Bases: dj . Manual Information about male-female pair used for breeding. Attributes: Name Type Description breeding_pair varchar(24) Pair identifier. bp_start_date date Optional. Start date of breeding. bp_end_date date Option. End date of breeding. bp_description varchar(2048) Description of the pair. Source code in element_animal/genotyping.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 @schema class BreedingPair ( dj . Manual ): \"\"\"Information about male-female pair used for breeding. Attributes: breeding_pair ( varchar(24) ): Pair identifier. bp_start_date (date): Optional. Start date of breeding. bp_end_date (date): Option. End date of breeding. bp_description ( varchar(2048) ): Description of the pair. \"\"\" definition = \"\"\" -> subject.Line breeding_pair : varchar(32) --- bp_start_date=null : date bp_end_date=null : date bp_description='' : varchar(2048) \"\"\" class Father ( dj . Part ): \"\"\"Information about male breeder. Attributes: BreedingPair (foreign key): BreedingPair key. subject.Subject (foreign key): subject.Subject key. \"\"\" definition = \"\"\" -> master --- -> subject.Subject.proj(father=\"subject\") \"\"\" class Mother ( dj . Part ): \"\"\"Information about female breeder. Attributes: BreedingPair (foreign key): BreedingPair key. subject.Subject (foreign key): subject.Subject key. \"\"\" definition = \"\"\" -> master --- -> subject.Subject.proj(mother=\"subject\") \"\"\" Father \u00b6 Bases: dj . Part Information about male breeder. Attributes: Name Type Description BreedingPair foreign key BreedingPair key. subject.Subject foreign key subject.Subject key. Source code in element_animal/genotyping.py 112 113 114 115 116 117 118 119 120 121 122 123 124 class Father ( dj . Part ): \"\"\"Information about male breeder. Attributes: BreedingPair (foreign key): BreedingPair key. subject.Subject (foreign key): subject.Subject key. \"\"\" definition = \"\"\" -> master --- -> subject.Subject.proj(father=\"subject\") \"\"\" Mother \u00b6 Bases: dj . Part Information about female breeder. Attributes: Name Type Description BreedingPair foreign key BreedingPair key. subject.Subject foreign key subject.Subject key. Source code in element_animal/genotyping.py 126 127 128 129 130 131 132 133 134 135 136 137 138 class Mother ( dj . Part ): \"\"\"Information about female breeder. Attributes: BreedingPair (foreign key): BreedingPair key. subject.Subject (foreign key): subject.Subject key. \"\"\" definition = \"\"\" -> master --- -> subject.Subject.proj(mother=\"subject\") \"\"\" Litter \u00b6 Bases: dj . Manual Information about litter (group of animals born to a breeding pair). Attributes: Name Type Description BreedingPair foreign key BreedingPair key. litter_birth_date date Birth date of litter. num_of_pups tinyint Number of animals in the litter. litter_notes varchar(255) Notes about the litter. Source code in element_animal/genotyping.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 @schema class Litter ( dj . Manual ): \"\"\"Information about litter (group of animals born to a breeding pair). Attributes: BreedingPair (foreign key): BreedingPair key. litter_birth_date (date): Birth date of litter. num_of_pups (tinyint): Number of animals in the litter. litter_notes ( varchar(255) ): Notes about the litter. \"\"\" definition = \"\"\" -> BreedingPair litter_birth_date : date --- num_of_pups : tinyint litter_notes='' : varchar(255) \"\"\" Weaning \u00b6 Bases: dj . Manual Information about weaning (maternal separation). Attributes: Name Type Description Litter foreign key Litter key. weaning_date date Litter key. num_of_male tinyint Number of males. num_of_female tinyint Number of females. weaning_notes varchar(255) Notes about weaning. Source code in element_animal/genotyping.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 @schema class Weaning ( dj . Manual ): \"\"\"Information about weaning (maternal separation). Attributes: Litter (foreign key): Litter key. weaning_date (date): Litter key. num_of_male (tinyint): Number of males. num_of_female (tinyint): Number of females. weaning_notes ( varchar(255) ): Notes about weaning. \"\"\" definition = \"\"\" -> Litter --- weaning_date : date num_of_male : tinyint num_of_female : tinyint weaning_notes='' : varchar(255) \"\"\" SubjectLitter \u00b6 Bases: dj . Manual Subject and its litter. Attributes: Name Type Description subject.Subject foreign key subject.Subject key. Litter foreign key Litter key. Source code in element_animal/genotyping.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 @schema class SubjectLitter ( dj . Manual ): \"\"\"Subject and its litter. Attributes: subject.Subject (foreign key): subject.Subject key. Litter (foreign key): Litter key. \"\"\" definition = \"\"\" -> subject.Subject --- -> Litter \"\"\" Cage \u00b6 Bases: dj . Lookup Cage information. Attributes: Name Type Description cage varchar(32) Cage identifier. cage_purpose varchar(128) Cage purpose. Source code in element_animal/genotyping.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 @schema class Cage ( dj . Lookup ): \"\"\"Cage information. Attributes: cage ( varchar(32) ): Cage identifier. cage_purpose ( varchar(128) ): Cage purpose. \"\"\" definition = \"\"\" cage : varchar(32) # cage identifier --- cage_purpose='' : varchar(128) # cage purpose \"\"\" SubjectCaging \u00b6 Bases: dj . Manual Information about subject and its cage. Attributes: Name Type Description subject.Subject foreign key subject.Subject key. caging_datetime datetime Date of cage entry. Cage foreign key Cage key. User foreign key User key. Source code in element_animal/genotyping.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @schema class SubjectCaging ( dj . Manual ): \"\"\"Information about subject and its cage. Attributes: subject.Subject (foreign key): subject.Subject key. caging_datetime (datetime): Date of cage entry. Cage (foreign key): Cage key. User (foreign key): User key. \"\"\" definition = \"\"\" # record of animal caging -> subject.Subject caging_datetime : datetime # date of cage entry --- -> Cage -> User # person associated with the cage transfer \"\"\" GenotypeTest \u00b6 Bases: dj . Manual Information about genotype test. Attributes: Name Type Description subject.Subject foreign key subject.Subject key. Sequence foreign key Sequence key. genotype_test_id datetime Identifier of a genotype test. test_result Present or Absent Test result. Source code in element_animal/genotyping.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 @schema class GenotypeTest ( dj . Manual ): \"\"\"Information about genotype test. Attributes: subject.Subject (foreign key): subject.Subject key. Sequence (foreign key): Sequence key. genotype_test_id (datetime): Identifier of a genotype test. test_result (Present or Absent): Test result. \"\"\" definition = \"\"\" -> subject.Subject -> Sequence genotype_test_id : varchar(32) # identifier of a genotype test --- test_result : enum(\"Present\", \"Absent\") # test result \"\"\"", "title": "genotyping.py"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.activate", "text": "Activate this schema. Parameters: Name Type Description Default genotyping_schema_name str schema name on the database server to activate the genotyping element. required subject_schema_name str schema name on the database server to activate the subject element None create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables bool when True (default), create tables in the database if they do not yet exist. True linking_module bool a module name or a module containing the None required dependencies to activate the `subject` element required Dependencies: Upstream tables Source: The source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX). Lab: The lab for which a particular animal belongs to. Protocol: The protocol applicable to a particular animal (e.g. IACUC, IRB). User: The user associated with a particular animal. Source code in element_animal/genotyping.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def activate ( genotyping_schema_name , subject_schema_name = None , create_schema = True , create_tables = True , linking_module = None , ): \"\"\"Activate this schema. Args: genotyping_schema_name (str): schema name on the database server to activate the `genotyping` element. subject_schema_name (str): schema name on the database server to activate the `subject` element create_schema (bool, optional): when True (default), create schema in the database if it does not yet exist. create_tables (bool, optional): when True (default), create tables in the database if they do not yet exist. linking_module (bool, optional): a module name or a module containing the required dependencies to activate the `subject` element: Dependencies: Upstream tables: Source: The source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX). Lab: The lab for which a particular animal belongs to. Protocol: The protocol applicable to a particular animal (e.g. IACUC, IRB). User: The user associated with a particular animal. \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must \" + \"be a module's name or a module\" ) subject . activate ( subject_schema_name , create_schema = create_schema , create_tables = create_tables , linking_module = linking_module , ) schema . activate ( genotyping_schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , )", "title": "activate()"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.Sequence", "text": "Bases: dj . Lookup Gene sequence information. Attributes: Name Type Description sequence varchar(32) Abbreviated sequence name base_pairs varchar(1024) Base pairs sequence_desc varchar(255) Description Source code in element_animal/genotyping.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @schema class Sequence ( dj . Lookup ): \"\"\"Gene sequence information. Attributes: sequence ( varchar(32) ): Abbreviated sequence name base_pairs ( varchar(1024) ): Base pairs sequence_desc ( varchar(255) ): Description \"\"\" definition = \"\"\" sequence : varchar(32) # abbreviated sequence name --- base_pairs='' : varchar(1024) # base pairs sequence_desc='' : varchar(255) # description \"\"\"", "title": "Sequence"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.AlleleSequence", "text": "Bases: dj . Lookup Allele sequence information. Attributes: Name Type Description subject.Allele foreign key subject.Allele key. Sequence varchar(1024) Sequence key. Source code in element_animal/genotyping.py 77 78 79 80 81 82 83 84 85 86 87 88 89 @schema class AlleleSequence ( dj . Lookup ): \"\"\"Allele sequence information. Attributes: subject.Allele (foreign key): subject.Allele key. Sequence ( varchar(1024) ): Sequence key. \"\"\" definition = \"\"\" -> subject.Allele -> Sequence \"\"\"", "title": "AlleleSequence"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.BreedingPair", "text": "Bases: dj . Manual Information about male-female pair used for breeding. Attributes: Name Type Description breeding_pair varchar(24) Pair identifier. bp_start_date date Optional. Start date of breeding. bp_end_date date Option. End date of breeding. bp_description varchar(2048) Description of the pair. Source code in element_animal/genotyping.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 @schema class BreedingPair ( dj . Manual ): \"\"\"Information about male-female pair used for breeding. Attributes: breeding_pair ( varchar(24) ): Pair identifier. bp_start_date (date): Optional. Start date of breeding. bp_end_date (date): Option. End date of breeding. bp_description ( varchar(2048) ): Description of the pair. \"\"\" definition = \"\"\" -> subject.Line breeding_pair : varchar(32) --- bp_start_date=null : date bp_end_date=null : date bp_description='' : varchar(2048) \"\"\" class Father ( dj . Part ): \"\"\"Information about male breeder. Attributes: BreedingPair (foreign key): BreedingPair key. subject.Subject (foreign key): subject.Subject key. \"\"\" definition = \"\"\" -> master --- -> subject.Subject.proj(father=\"subject\") \"\"\" class Mother ( dj . Part ): \"\"\"Information about female breeder. Attributes: BreedingPair (foreign key): BreedingPair key. subject.Subject (foreign key): subject.Subject key. \"\"\" definition = \"\"\" -> master --- -> subject.Subject.proj(mother=\"subject\") \"\"\"", "title": "BreedingPair"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.BreedingPair.Father", "text": "Bases: dj . Part Information about male breeder. Attributes: Name Type Description BreedingPair foreign key BreedingPair key. subject.Subject foreign key subject.Subject key. Source code in element_animal/genotyping.py 112 113 114 115 116 117 118 119 120 121 122 123 124 class Father ( dj . Part ): \"\"\"Information about male breeder. Attributes: BreedingPair (foreign key): BreedingPair key. subject.Subject (foreign key): subject.Subject key. \"\"\" definition = \"\"\" -> master --- -> subject.Subject.proj(father=\"subject\") \"\"\"", "title": "Father"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.BreedingPair.Mother", "text": "Bases: dj . Part Information about female breeder. Attributes: Name Type Description BreedingPair foreign key BreedingPair key. subject.Subject foreign key subject.Subject key. Source code in element_animal/genotyping.py 126 127 128 129 130 131 132 133 134 135 136 137 138 class Mother ( dj . Part ): \"\"\"Information about female breeder. Attributes: BreedingPair (foreign key): BreedingPair key. subject.Subject (foreign key): subject.Subject key. \"\"\" definition = \"\"\" -> master --- -> subject.Subject.proj(mother=\"subject\") \"\"\"", "title": "Mother"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.Litter", "text": "Bases: dj . Manual Information about litter (group of animals born to a breeding pair). Attributes: Name Type Description BreedingPair foreign key BreedingPair key. litter_birth_date date Birth date of litter. num_of_pups tinyint Number of animals in the litter. litter_notes varchar(255) Notes about the litter. Source code in element_animal/genotyping.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 @schema class Litter ( dj . Manual ): \"\"\"Information about litter (group of animals born to a breeding pair). Attributes: BreedingPair (foreign key): BreedingPair key. litter_birth_date (date): Birth date of litter. num_of_pups (tinyint): Number of animals in the litter. litter_notes ( varchar(255) ): Notes about the litter. \"\"\" definition = \"\"\" -> BreedingPair litter_birth_date : date --- num_of_pups : tinyint litter_notes='' : varchar(255) \"\"\"", "title": "Litter"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.Weaning", "text": "Bases: dj . Manual Information about weaning (maternal separation). Attributes: Name Type Description Litter foreign key Litter key. weaning_date date Litter key. num_of_male tinyint Number of males. num_of_female tinyint Number of females. weaning_notes varchar(255) Notes about weaning. Source code in element_animal/genotyping.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 @schema class Weaning ( dj . Manual ): \"\"\"Information about weaning (maternal separation). Attributes: Litter (foreign key): Litter key. weaning_date (date): Litter key. num_of_male (tinyint): Number of males. num_of_female (tinyint): Number of females. weaning_notes ( varchar(255) ): Notes about weaning. \"\"\" definition = \"\"\" -> Litter --- weaning_date : date num_of_male : tinyint num_of_female : tinyint weaning_notes='' : varchar(255) \"\"\"", "title": "Weaning"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.SubjectLitter", "text": "Bases: dj . Manual Subject and its litter. Attributes: Name Type Description subject.Subject foreign key subject.Subject key. Litter foreign key Litter key. Source code in element_animal/genotyping.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 @schema class SubjectLitter ( dj . Manual ): \"\"\"Subject and its litter. Attributes: subject.Subject (foreign key): subject.Subject key. Litter (foreign key): Litter key. \"\"\" definition = \"\"\" -> subject.Subject --- -> Litter \"\"\"", "title": "SubjectLitter"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.Cage", "text": "Bases: dj . Lookup Cage information. Attributes: Name Type Description cage varchar(32) Cage identifier. cage_purpose varchar(128) Cage purpose. Source code in element_animal/genotyping.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 @schema class Cage ( dj . Lookup ): \"\"\"Cage information. Attributes: cage ( varchar(32) ): Cage identifier. cage_purpose ( varchar(128) ): Cage purpose. \"\"\" definition = \"\"\" cage : varchar(32) # cage identifier --- cage_purpose='' : varchar(128) # cage purpose \"\"\"", "title": "Cage"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.SubjectCaging", "text": "Bases: dj . Manual Information about subject and its cage. Attributes: Name Type Description subject.Subject foreign key subject.Subject key. caging_datetime datetime Date of cage entry. Cage foreign key Cage key. User foreign key User key. Source code in element_animal/genotyping.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @schema class SubjectCaging ( dj . Manual ): \"\"\"Information about subject and its cage. Attributes: subject.Subject (foreign key): subject.Subject key. caging_datetime (datetime): Date of cage entry. Cage (foreign key): Cage key. User (foreign key): User key. \"\"\" definition = \"\"\" # record of animal caging -> subject.Subject caging_datetime : datetime # date of cage entry --- -> Cage -> User # person associated with the cage transfer \"\"\"", "title": "SubjectCaging"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.GenotypeTest", "text": "Bases: dj . Manual Information about genotype test. Attributes: Name Type Description subject.Subject foreign key subject.Subject key. Sequence foreign key Sequence key. genotype_test_id datetime Identifier of a genotype test. test_result Present or Absent Test result. Source code in element_animal/genotyping.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 @schema class GenotypeTest ( dj . Manual ): \"\"\"Information about genotype test. Attributes: subject.Subject (foreign key): subject.Subject key. Sequence (foreign key): Sequence key. genotype_test_id (datetime): Identifier of a genotype test. test_result (Present or Absent): Test result. \"\"\" definition = \"\"\" -> subject.Subject -> Sequence genotype_test_id : varchar(32) # identifier of a genotype test --- test_result : enum(\"Present\", \"Absent\") # test result \"\"\"", "title": "GenotypeTest"}, {"location": "api/element_animal/subject/", "text": "activate ( schema_name , * , create_schema = True , create_tables = True , linking_module = True ) \u00b6 Activate this schema. Parameters: Name Type Description Default schema_name str schema name on the database server to activate the subject element required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables bool when True (default), create tables in the database if they do not yet exist. True linking_module bool a module name or a module containing the True required dependencies to activate the `subject` element required Dependencies: Upstream tables Source: The source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) Lab: The lab for which a particular animal belongs to Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) User: the user associated with a particular animal Source code in element_animal/subject.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def activate ( schema_name : str , * , create_schema : bool = True , create_tables : bool = True , linking_module : bool = True ): \"\"\"Activate this schema. Args: schema_name (str): schema name on the database server to activate the `subject` element create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (bool): when True (default), create tables in the database if they do not yet exist. linking_module (bool): a module name or a module containing the required dependencies to activate the `subject` element: Dependencies: Upstream tables: Source: The source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) Lab: The lab for which a particular animal belongs to Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) User: the user associated with a particular animal \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must \" + \"be a module's name or a module\" ) schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , ) Strain \u00b6 Bases: dj . Lookup Genetic strain of an animal. (e.g. C57Bl/6). Attributes: Name Type Description strain varchar(32) Abbreviated strain name. strain_standard_name varchar(32) Formal name of a strain. strain_desc varchar(255) Optional. Description of this strain. Source code in element_animal/subject.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @schema class Strain ( dj . Lookup ): \"\"\"Genetic strain of an animal. (e.g. C57Bl/6). Attributes: strain ( varchar(32) ): Abbreviated strain name. strain_standard_name ( varchar(32) ): Formal name of a strain. strain_desc ( varchar(255) ): Optional. Description of this strain. \"\"\" definition = \"\"\" strain : varchar(32) # abbreviated strain name --- strain_standard_name : varchar(32) # formal name of a strain strain_desc='' : varchar(255) # description of this strain \"\"\" Allele \u00b6 Bases: dj . Lookup Store allele information. Attributes: Name Type Description allele varchar(32) Abbreviated allele name. allele_standard_name varchar(255) Optional. Standard name of an allele. Source code in element_animal/subject.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 @schema class Allele ( dj . Lookup ): \"\"\"Store allele information. Attributes: allele ( varchar(32) ): Abbreviated allele name. allele_standard_name ( varchar(255) ): Optional. Standard name of an allele. \"\"\" definition = \"\"\" allele : varchar(32) # abbreviated allele name --- allele_standard_name='' : varchar(255) # standard name of an allele \"\"\" class Source ( dj . Part ): \"\"\"Source of an allele. Attributes: Allele (foreign key): Allele key. source_identifier ( varchar(255) ): ID of the provider. source_url ( varchar(255) ): Optional. URL to the source information expression_data_url ( varchar(255) ): Optional. Link to the expression pattern from Allen institute brain atlas. \"\"\" definition = \"\"\" -> master --- -> Source source_identifier='' : varchar(255) source_url='' : varchar(255) # link to the line information expression_data_url='': varchar(255) # link to the expression pattern from Allen institute brain atlas \"\"\" Source \u00b6 Bases: dj . Part Source of an allele. Attributes: Name Type Description Allele foreign key Allele key. source_identifier varchar(255) ID of the provider. source_url varchar(255) Optional. URL to the source information expression_data_url varchar(255) Optional. Link to the expression pattern from Allen institute brain atlas. Source code in element_animal/subject.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 class Source ( dj . Part ): \"\"\"Source of an allele. Attributes: Allele (foreign key): Allele key. source_identifier ( varchar(255) ): ID of the provider. source_url ( varchar(255) ): Optional. URL to the source information expression_data_url ( varchar(255) ): Optional. Link to the expression pattern from Allen institute brain atlas. \"\"\" definition = \"\"\" -> master --- -> Source source_identifier='' : varchar(255) source_url='' : varchar(255) # link to the line information expression_data_url='': varchar(255) # link to the expression pattern from Allen institute brain atlas \"\"\" Line \u00b6 Bases: dj . Lookup Genetic line. Attributes: Name Type Description line varchar(32) Abbreviated name for the line. species varchar(64) Latin name preferred for NWB export. line_description varchar(2000) Optional. Description of the line. target_phenotype varchar(255) Optional. Targeted gene phenotype. is_active boolean) Whether the line is in active breeding. Source code in element_animal/subject.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 @schema class Line ( dj . Lookup ): \"\"\"Genetic line. Attributes: line ( varchar(32) ): Abbreviated name for the line. species ( varchar(64) ): Latin name preferred for NWB export. line_description ( varchar(2000) ): Optional. Description of the line. target_phenotype ( varchar(255) ): Optional. Targeted gene phenotype. is_active (boolean) : Whether the line is in active breeding. \"\"\" definition = \"\"\" line : varchar(32) # abbreviated name for the line --- species='' : varchar(64) # Latin name preferred for NWB export line_description='' : varchar(2000) target_phenotype='' : varchar(255) is_active : boolean # whether the line is in active breeding \"\"\" class Allele ( dj . Part ): \"\"\"Allele of the line. Attributes: Line (foreign key): Line key. Allele (foreign key): Allele key. \"\"\" definition = \"\"\" -> master -> Allele \"\"\" Allele \u00b6 Bases: dj . Part Allele of the line. Attributes: Name Type Description Line foreign key Line key. Allele foreign key Allele key. Source code in element_animal/subject.py 127 128 129 130 131 132 133 134 135 136 137 138 class Allele ( dj . Part ): \"\"\"Allele of the line. Attributes: Line (foreign key): Line key. Allele (foreign key): Allele key. \"\"\" definition = \"\"\" -> master -> Allele \"\"\" Subject \u00b6 Bases: dj . Manual Animal subject information. Attributes: Name Type Description subject varchar(8) Subject ID. subject_nickname varchar(8) Subject nickname. sex enum 'M', 'F', or 'U'; Male, Female, or Unknown. subject_birth_date date Birth date of the subject. subject_description varchar(1024) Description of the subject. Source code in element_animal/subject.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 @schema class Subject ( dj . Manual ): \"\"\"Animal subject information. Attributes: subject ( varchar(8) ): Subject ID. subject_nickname ( varchar(8) ): Subject nickname. sex (enum): 'M', 'F', or 'U'; Male, Female, or Unknown. subject_birth_date (date): Birth date of the subject. subject_description ( varchar(1024) ): Description of the subject. \"\"\" definition = \"\"\" subject : varchar(8) --- subject_nickname='' : varchar(64) sex : enum('M', 'F', 'U') subject_birth_date : date subject_description='' : varchar(1024) \"\"\" class Protocol ( dj . Part ): \"\"\"Protocol under which this subject animal is used. Attributes: Subject (foreign key): Subject key. Protocol (foreign key): Protocol key. \"\"\" definition = \"\"\" -> master -> Protocol \"\"\" class User ( dj . Part ): \"\"\"Individual responsible for experiment or management of the subject. Attributes: Subject (foreign key): Subject key. User (foreign key): User key. \"\"\" definition = \"\"\" -> master -> User \"\"\" class Line ( dj . Part ): \"\"\"Genetic line of the subject. Attributes: Subject (foreign key): Subject key. Line (foreign key): Line key. \"\"\" definition = \"\"\" -> master --- -> Line \"\"\" class Strain ( dj . Part ): \"\"\"Genetic strain of the subject. Attributes: Subject (foreign key): Subject key. Strain (foreign key): Strain key. \"\"\" definition = \"\"\" -> master --- -> Strain \"\"\" class Source ( dj . Part ): \"\"\"Source (e.g., vendor) of the subject. Attributes: Subject (foreign key): Subject key. Source (foreign key): Source key. \"\"\" definition = \"\"\" -> master --- -> Source \"\"\" class Lab ( dj . Part ): \"\"\"Lab where the subject belongs. Attributes: Subject (foreign key): Subject key. Lab (foreign key): Lab key. subject_alias ( varchar(32) ): Alias for lab if different from id. \"\"\" definition = \"\"\" -> master -> Lab --- subject_alias='' : varchar(32) # alias for lab if different from id. \"\"\" Protocol \u00b6 Bases: dj . Part Protocol under which this subject animal is used. Attributes: Name Type Description Subject foreign key Subject key. Protocol foreign key Protocol key. Source code in element_animal/subject.py 162 163 164 165 166 167 168 169 170 171 172 173 class Protocol ( dj . Part ): \"\"\"Protocol under which this subject animal is used. Attributes: Subject (foreign key): Subject key. Protocol (foreign key): Protocol key. \"\"\" definition = \"\"\" -> master -> Protocol \"\"\" User \u00b6 Bases: dj . Part Individual responsible for experiment or management of the subject. Attributes: Name Type Description Subject foreign key Subject key. User foreign key User key. Source code in element_animal/subject.py 175 176 177 178 179 180 181 182 183 184 185 186 class User ( dj . Part ): \"\"\"Individual responsible for experiment or management of the subject. Attributes: Subject (foreign key): Subject key. User (foreign key): User key. \"\"\" definition = \"\"\" -> master -> User \"\"\" Line \u00b6 Bases: dj . Part Genetic line of the subject. Attributes: Name Type Description Subject foreign key Subject key. Line foreign key Line key. Source code in element_animal/subject.py 188 189 190 191 192 193 194 195 196 197 198 199 200 class Line ( dj . Part ): \"\"\"Genetic line of the subject. Attributes: Subject (foreign key): Subject key. Line (foreign key): Line key. \"\"\" definition = \"\"\" -> master --- -> Line \"\"\" Strain \u00b6 Bases: dj . Part Genetic strain of the subject. Attributes: Name Type Description Subject foreign key Subject key. Strain foreign key Strain key. Source code in element_animal/subject.py 202 203 204 205 206 207 208 209 210 211 212 213 214 class Strain ( dj . Part ): \"\"\"Genetic strain of the subject. Attributes: Subject (foreign key): Subject key. Strain (foreign key): Strain key. \"\"\" definition = \"\"\" -> master --- -> Strain \"\"\" Source \u00b6 Bases: dj . Part Source (e.g., vendor) of the subject. Attributes: Name Type Description Subject foreign key Subject key. Source foreign key Source key. Source code in element_animal/subject.py 216 217 218 219 220 221 222 223 224 225 226 227 228 class Source ( dj . Part ): \"\"\"Source (e.g., vendor) of the subject. Attributes: Subject (foreign key): Subject key. Source (foreign key): Source key. \"\"\" definition = \"\"\" -> master --- -> Source \"\"\" Lab \u00b6 Bases: dj . Part Lab where the subject belongs. Attributes: Name Type Description Subject foreign key Subject key. Lab foreign key Lab key. subject_alias varchar(32) Alias for lab if different from id. Source code in element_animal/subject.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 class Lab ( dj . Part ): \"\"\"Lab where the subject belongs. Attributes: Subject (foreign key): Subject key. Lab (foreign key): Lab key. subject_alias ( varchar(32) ): Alias for lab if different from id. \"\"\" definition = \"\"\" -> master -> Lab --- subject_alias='' : varchar(32) # alias for lab if different from id. \"\"\" SubjectDeath \u00b6 Bases: dj . Manual Subject death information. Attributes: Name Type Description Subject foreign key Subject key. date_date date) Death date. Source code in element_animal/subject.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 @schema class SubjectDeath ( dj . Manual ): \"\"\"Subject death information. Attributes: Subject (foreign key): Subject key. date_date (date) : Death date. \"\"\" definition = \"\"\" -> Subject --- death_date : date # death date \"\"\" SubjectCull \u00b6 Bases: dj . Manual Subject culling information. Attributes: Name Type Description SubjectDeath foreign key SubjectDeath key. cull_method varchar(255) Optional. Culling method (e.g., cervical dislocation) cull_reason varchar(255) Optional. Reason for culling. cull_notes varchar(1000) Optional. Description of the culling. Source code in element_animal/subject.py 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 @schema class SubjectCull ( dj . Manual ): \"\"\"Subject culling information. Attributes: SubjectDeath (foreign key): SubjectDeath key. cull_method ( varchar(255) ): Optional. Culling method (e.g., cervical dislocation) cull_reason ( varchar(255) ): Optional. Reason for culling. cull_notes ( varchar(1000) ): Optional. Description of the culling. \"\"\" definition = \"\"\" -> SubjectDeath --- cull_method='': varchar(255) cull_reason='': varchar(255) cull_notes='' : varchar(1000) \"\"\" Zygosity \u00b6 Bases: dj . Manual Information about zygosity of a subject. Attributes: Name Type Description Subject foreign key Subject key. Allele foreign key Allele key. zygosity Present or Absent or Homozygous or Heterozygous Similarity of an allele. Source code in element_animal/subject.py 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 @schema class Zygosity ( dj . Manual ): \"\"\"Information about zygosity of a subject. Attributes: Subject (foreign key): Subject key. Allele (foreign key): Allele key. zygosity (Present or Absent or Homozygous or Heterozygous): Similarity of an allele. \"\"\" definition = \"\"\" -> Subject -> Allele --- zygosity : enum(\"Present\", \"Absent\", \"Homozygous\", \"Heterozygous\") \"\"\"", "title": "subject.py"}, {"location": "api/element_animal/subject/#element_animal.subject.activate", "text": "Activate this schema. Parameters: Name Type Description Default schema_name str schema name on the database server to activate the subject element required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables bool when True (default), create tables in the database if they do not yet exist. True linking_module bool a module name or a module containing the True required dependencies to activate the `subject` element required Dependencies: Upstream tables Source: The source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) Lab: The lab for which a particular animal belongs to Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) User: the user associated with a particular animal Source code in element_animal/subject.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def activate ( schema_name : str , * , create_schema : bool = True , create_tables : bool = True , linking_module : bool = True ): \"\"\"Activate this schema. Args: schema_name (str): schema name on the database server to activate the `subject` element create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (bool): when True (default), create tables in the database if they do not yet exist. linking_module (bool): a module name or a module containing the required dependencies to activate the `subject` element: Dependencies: Upstream tables: Source: The source of the material/resources (e.g. allele, animal) - typically refers to the vendor (e.g. Jackson Lab - JAX) Lab: The lab for which a particular animal belongs to Protocol: the protocol applicable to a particular animal (e.g. IACUC, IRB) User: the user associated with a particular animal \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must \" + \"be a module's name or a module\" ) schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , )", "title": "activate()"}, {"location": "api/element_animal/subject/#element_animal.subject.Strain", "text": "Bases: dj . Lookup Genetic strain of an animal. (e.g. C57Bl/6). Attributes: Name Type Description strain varchar(32) Abbreviated strain name. strain_standard_name varchar(32) Formal name of a strain. strain_desc varchar(255) Optional. Description of this strain. Source code in element_animal/subject.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @schema class Strain ( dj . Lookup ): \"\"\"Genetic strain of an animal. (e.g. C57Bl/6). Attributes: strain ( varchar(32) ): Abbreviated strain name. strain_standard_name ( varchar(32) ): Formal name of a strain. strain_desc ( varchar(255) ): Optional. Description of this strain. \"\"\" definition = \"\"\" strain : varchar(32) # abbreviated strain name --- strain_standard_name : varchar(32) # formal name of a strain strain_desc='' : varchar(255) # description of this strain \"\"\"", "title": "Strain"}, {"location": "api/element_animal/subject/#element_animal.subject.Allele", "text": "Bases: dj . Lookup Store allele information. Attributes: Name Type Description allele varchar(32) Abbreviated allele name. allele_standard_name varchar(255) Optional. Standard name of an allele. Source code in element_animal/subject.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 @schema class Allele ( dj . Lookup ): \"\"\"Store allele information. Attributes: allele ( varchar(32) ): Abbreviated allele name. allele_standard_name ( varchar(255) ): Optional. Standard name of an allele. \"\"\" definition = \"\"\" allele : varchar(32) # abbreviated allele name --- allele_standard_name='' : varchar(255) # standard name of an allele \"\"\" class Source ( dj . Part ): \"\"\"Source of an allele. Attributes: Allele (foreign key): Allele key. source_identifier ( varchar(255) ): ID of the provider. source_url ( varchar(255) ): Optional. URL to the source information expression_data_url ( varchar(255) ): Optional. Link to the expression pattern from Allen institute brain atlas. \"\"\" definition = \"\"\" -> master --- -> Source source_identifier='' : varchar(255) source_url='' : varchar(255) # link to the line information expression_data_url='': varchar(255) # link to the expression pattern from Allen institute brain atlas \"\"\"", "title": "Allele"}, {"location": "api/element_animal/subject/#element_animal.subject.Allele.Source", "text": "Bases: dj . Part Source of an allele. Attributes: Name Type Description Allele foreign key Allele key. source_identifier varchar(255) ID of the provider. source_url varchar(255) Optional. URL to the source information expression_data_url varchar(255) Optional. Link to the expression pattern from Allen institute brain atlas. Source code in element_animal/subject.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 class Source ( dj . Part ): \"\"\"Source of an allele. Attributes: Allele (foreign key): Allele key. source_identifier ( varchar(255) ): ID of the provider. source_url ( varchar(255) ): Optional. URL to the source information expression_data_url ( varchar(255) ): Optional. Link to the expression pattern from Allen institute brain atlas. \"\"\" definition = \"\"\" -> master --- -> Source source_identifier='' : varchar(255) source_url='' : varchar(255) # link to the line information expression_data_url='': varchar(255) # link to the expression pattern from Allen institute brain atlas \"\"\"", "title": "Source"}, {"location": "api/element_animal/subject/#element_animal.subject.Line", "text": "Bases: dj . Lookup Genetic line. Attributes: Name Type Description line varchar(32) Abbreviated name for the line. species varchar(64) Latin name preferred for NWB export. line_description varchar(2000) Optional. Description of the line. target_phenotype varchar(255) Optional. Targeted gene phenotype. is_active boolean) Whether the line is in active breeding. Source code in element_animal/subject.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 @schema class Line ( dj . Lookup ): \"\"\"Genetic line. Attributes: line ( varchar(32) ): Abbreviated name for the line. species ( varchar(64) ): Latin name preferred for NWB export. line_description ( varchar(2000) ): Optional. Description of the line. target_phenotype ( varchar(255) ): Optional. Targeted gene phenotype. is_active (boolean) : Whether the line is in active breeding. \"\"\" definition = \"\"\" line : varchar(32) # abbreviated name for the line --- species='' : varchar(64) # Latin name preferred for NWB export line_description='' : varchar(2000) target_phenotype='' : varchar(255) is_active : boolean # whether the line is in active breeding \"\"\" class Allele ( dj . Part ): \"\"\"Allele of the line. Attributes: Line (foreign key): Line key. Allele (foreign key): Allele key. \"\"\" definition = \"\"\" -> master -> Allele \"\"\"", "title": "Line"}, {"location": "api/element_animal/subject/#element_animal.subject.Line.Allele", "text": "Bases: dj . Part Allele of the line. Attributes: Name Type Description Line foreign key Line key. Allele foreign key Allele key. Source code in element_animal/subject.py 127 128 129 130 131 132 133 134 135 136 137 138 class Allele ( dj . Part ): \"\"\"Allele of the line. Attributes: Line (foreign key): Line key. Allele (foreign key): Allele key. \"\"\" definition = \"\"\" -> master -> Allele \"\"\"", "title": "Allele"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject", "text": "Bases: dj . Manual Animal subject information. Attributes: Name Type Description subject varchar(8) Subject ID. subject_nickname varchar(8) Subject nickname. sex enum 'M', 'F', or 'U'; Male, Female, or Unknown. subject_birth_date date Birth date of the subject. subject_description varchar(1024) Description of the subject. Source code in element_animal/subject.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 @schema class Subject ( dj . Manual ): \"\"\"Animal subject information. Attributes: subject ( varchar(8) ): Subject ID. subject_nickname ( varchar(8) ): Subject nickname. sex (enum): 'M', 'F', or 'U'; Male, Female, or Unknown. subject_birth_date (date): Birth date of the subject. subject_description ( varchar(1024) ): Description of the subject. \"\"\" definition = \"\"\" subject : varchar(8) --- subject_nickname='' : varchar(64) sex : enum('M', 'F', 'U') subject_birth_date : date subject_description='' : varchar(1024) \"\"\" class Protocol ( dj . Part ): \"\"\"Protocol under which this subject animal is used. Attributes: Subject (foreign key): Subject key. Protocol (foreign key): Protocol key. \"\"\" definition = \"\"\" -> master -> Protocol \"\"\" class User ( dj . Part ): \"\"\"Individual responsible for experiment or management of the subject. Attributes: Subject (foreign key): Subject key. User (foreign key): User key. \"\"\" definition = \"\"\" -> master -> User \"\"\" class Line ( dj . Part ): \"\"\"Genetic line of the subject. Attributes: Subject (foreign key): Subject key. Line (foreign key): Line key. \"\"\" definition = \"\"\" -> master --- -> Line \"\"\" class Strain ( dj . Part ): \"\"\"Genetic strain of the subject. Attributes: Subject (foreign key): Subject key. Strain (foreign key): Strain key. \"\"\" definition = \"\"\" -> master --- -> Strain \"\"\" class Source ( dj . Part ): \"\"\"Source (e.g., vendor) of the subject. Attributes: Subject (foreign key): Subject key. Source (foreign key): Source key. \"\"\" definition = \"\"\" -> master --- -> Source \"\"\" class Lab ( dj . Part ): \"\"\"Lab where the subject belongs. Attributes: Subject (foreign key): Subject key. Lab (foreign key): Lab key. subject_alias ( varchar(32) ): Alias for lab if different from id. \"\"\" definition = \"\"\" -> master -> Lab --- subject_alias='' : varchar(32) # alias for lab if different from id. \"\"\"", "title": "Subject"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.Protocol", "text": "Bases: dj . Part Protocol under which this subject animal is used. Attributes: Name Type Description Subject foreign key Subject key. Protocol foreign key Protocol key. Source code in element_animal/subject.py 162 163 164 165 166 167 168 169 170 171 172 173 class Protocol ( dj . Part ): \"\"\"Protocol under which this subject animal is used. Attributes: Subject (foreign key): Subject key. Protocol (foreign key): Protocol key. \"\"\" definition = \"\"\" -> master -> Protocol \"\"\"", "title": "Protocol"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.User", "text": "Bases: dj . Part Individual responsible for experiment or management of the subject. Attributes: Name Type Description Subject foreign key Subject key. User foreign key User key. Source code in element_animal/subject.py 175 176 177 178 179 180 181 182 183 184 185 186 class User ( dj . Part ): \"\"\"Individual responsible for experiment or management of the subject. Attributes: Subject (foreign key): Subject key. User (foreign key): User key. \"\"\" definition = \"\"\" -> master -> User \"\"\"", "title": "User"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.Line", "text": "Bases: dj . Part Genetic line of the subject. Attributes: Name Type Description Subject foreign key Subject key. Line foreign key Line key. Source code in element_animal/subject.py 188 189 190 191 192 193 194 195 196 197 198 199 200 class Line ( dj . Part ): \"\"\"Genetic line of the subject. Attributes: Subject (foreign key): Subject key. Line (foreign key): Line key. \"\"\" definition = \"\"\" -> master --- -> Line \"\"\"", "title": "Line"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.Strain", "text": "Bases: dj . Part Genetic strain of the subject. Attributes: Name Type Description Subject foreign key Subject key. Strain foreign key Strain key. Source code in element_animal/subject.py 202 203 204 205 206 207 208 209 210 211 212 213 214 class Strain ( dj . Part ): \"\"\"Genetic strain of the subject. Attributes: Subject (foreign key): Subject key. Strain (foreign key): Strain key. \"\"\" definition = \"\"\" -> master --- -> Strain \"\"\"", "title": "Strain"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.Source", "text": "Bases: dj . Part Source (e.g., vendor) of the subject. Attributes: Name Type Description Subject foreign key Subject key. Source foreign key Source key. Source code in element_animal/subject.py 216 217 218 219 220 221 222 223 224 225 226 227 228 class Source ( dj . Part ): \"\"\"Source (e.g., vendor) of the subject. Attributes: Subject (foreign key): Subject key. Source (foreign key): Source key. \"\"\" definition = \"\"\" -> master --- -> Source \"\"\"", "title": "Source"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.Lab", "text": "Bases: dj . Part Lab where the subject belongs. Attributes: Name Type Description Subject foreign key Subject key. Lab foreign key Lab key. subject_alias varchar(32) Alias for lab if different from id. Source code in element_animal/subject.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 class Lab ( dj . Part ): \"\"\"Lab where the subject belongs. Attributes: Subject (foreign key): Subject key. Lab (foreign key): Lab key. subject_alias ( varchar(32) ): Alias for lab if different from id. \"\"\" definition = \"\"\" -> master -> Lab --- subject_alias='' : varchar(32) # alias for lab if different from id. \"\"\"", "title": "Lab"}, {"location": "api/element_animal/subject/#element_animal.subject.SubjectDeath", "text": "Bases: dj . Manual Subject death information. Attributes: Name Type Description Subject foreign key Subject key. date_date date) Death date. Source code in element_animal/subject.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 @schema class SubjectDeath ( dj . Manual ): \"\"\"Subject death information. Attributes: Subject (foreign key): Subject key. date_date (date) : Death date. \"\"\" definition = \"\"\" -> Subject --- death_date : date # death date \"\"\"", "title": "SubjectDeath"}, {"location": "api/element_animal/subject/#element_animal.subject.SubjectCull", "text": "Bases: dj . Manual Subject culling information. Attributes: Name Type Description SubjectDeath foreign key SubjectDeath key. cull_method varchar(255) Optional. Culling method (e.g., cervical dislocation) cull_reason varchar(255) Optional. Reason for culling. cull_notes varchar(1000) Optional. Description of the culling. Source code in element_animal/subject.py 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 @schema class SubjectCull ( dj . Manual ): \"\"\"Subject culling information. Attributes: SubjectDeath (foreign key): SubjectDeath key. cull_method ( varchar(255) ): Optional. Culling method (e.g., cervical dislocation) cull_reason ( varchar(255) ): Optional. Reason for culling. cull_notes ( varchar(1000) ): Optional. Description of the culling. \"\"\" definition = \"\"\" -> SubjectDeath --- cull_method='': varchar(255) cull_reason='': varchar(255) cull_notes='' : varchar(1000) \"\"\"", "title": "SubjectCull"}, {"location": "api/element_animal/subject/#element_animal.subject.Zygosity", "text": "Bases: dj . Manual Information about zygosity of a subject. Attributes: Name Type Description Subject foreign key Subject key. Allele foreign key Allele key. zygosity Present or Absent or Homozygous or Heterozygous Similarity of an allele. Source code in element_animal/subject.py 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 @schema class Zygosity ( dj . Manual ): \"\"\"Information about zygosity of a subject. Attributes: Subject (foreign key): Subject key. Allele (foreign key): Allele key. zygosity (Present or Absent or Homozygous or Heterozygous): Similarity of an allele. \"\"\" definition = \"\"\" -> Subject -> Allele --- zygosity : enum(\"Present\", \"Absent\", \"Homozygous\", \"Heterozygous\") \"\"\"", "title": "Zygosity"}, {"location": "api/element_animal/version/", "text": "Package metadata.", "title": "version.py"}, {"location": "api/element_animal/export/nwb/", "text": "subject_to_nwb ( session_key ) \u00b6 Generate a dictionary object containing subject information. Parameters: Name Type Description Default session_key dict Key specifying one entry in element_animal.subject.Subject required Returns: Type Description pynwb.file.Subject: NWB object Source code in element_animal/export/nwb.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def subject_to_nwb ( session_key : dict ): \"\"\"Generate a dictionary object containing subject information. Args: session_key (dict): Key specifying one entry in element_animal.subject.Subject Returns: pynwb.file.Subject: NWB object \"\"\" subject_query = subject . Subject & session_key subject_query = subject_query . join ( subject . Subject . Line , left = True ) subject_query = subject_query . join ( subject . Subject . Strain , left = True ) subject_query = subject_query . join ( subject . Subject . Source , left = True ) subject_info = subject_query . fetch1 () return pynwb . file . Subject ( subject_id = subject_info [ \"subject\" ], sex = subject_info [ \"sex\" ], date_of_birth = datetime . combine ( subject_info [ \"subject_birth_date\" ], datetime . strptime ( \"00:00:00\" , \"%H:%M:%S\" ) . time (), ), description = json . dumps ( subject_info , default = str ), genotype = \" x \" . join ( ( subject . Line . Allele * subject . Subject . Line & subject_query ) . fetch ( \"allele\" ) ), )", "title": "nwb.py"}, {"location": "api/element_animal/export/nwb/#element_animal.export.nwb.subject_to_nwb", "text": "Generate a dictionary object containing subject information. Parameters: Name Type Description Default session_key dict Key specifying one entry in element_animal.subject.Subject required Returns: Type Description pynwb.file.Subject: NWB object Source code in element_animal/export/nwb.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def subject_to_nwb ( session_key : dict ): \"\"\"Generate a dictionary object containing subject information. Args: session_key (dict): Key specifying one entry in element_animal.subject.Subject Returns: pynwb.file.Subject: NWB object \"\"\" subject_query = subject . Subject & session_key subject_query = subject_query . join ( subject . Subject . Line , left = True ) subject_query = subject_query . join ( subject . Subject . Strain , left = True ) subject_query = subject_query . join ( subject . Subject . Source , left = True ) subject_info = subject_query . fetch1 () return pynwb . file . Subject ( subject_id = subject_info [ \"subject\" ], sex = subject_info [ \"sex\" ], date_of_birth = datetime . combine ( subject_info [ \"subject_birth_date\" ], datetime . strptime ( \"00:00:00\" , \"%H:%M:%S\" ) . time (), ), description = json . dumps ( subject_info , default = str ), genotype = \" x \" . join ( ( subject . Line . Allele * subject . Subject . Line & subject_query ) . fetch ( \"allele\" ) ), )", "title": "subject_to_nwb()"}]}