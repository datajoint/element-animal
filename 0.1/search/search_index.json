{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Element Animal", "text": "<p>DataJoint Element for storing animal meta data, genotype, and surgery information. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline.</p> <ul> <li><code>element-animal</code> features a DataJoint pipeline design for subject and genotyping management.</li> </ul> <ul> <li><code>element-animal</code> is not a complete workflow by itself, but rather a modular design   of tables and dependencies.</li> </ul> <ul> <li><code>element-animal</code> can be flexibly attached to any DataJoint workflow.</li> </ul> <p>Visit the Concepts page for more information on colony management and Element Animal. To get started with building your data pipeline visit the Tutorials page.</p> <p></p> <p></p> <p></p>"}, {"location": "changelog/", "title": "Changelog", "text": "<p>Observes Semantic Versioning standard and Keep a Changelog convention.</p>"}, {"location": "changelog/#015-2023-03-02", "title": "0.1.5 - 2023-03-02", "text": "<ul> <li>Add - <code>surgery</code> schema</li> <li>Add - mkdocs documentation</li> <li>Update - string typing for NWB export of Species</li> </ul>"}, {"location": "changelog/#014-2022-08-30", "title": "0.1.4 - 2022-08-30", "text": "<ul> <li>Add - \"subject_nickname\" into Subject table</li> <li>Update - rework \"SubjectCull\" table</li> </ul>"}, {"location": "changelog/#013-2022-07-06", "title": "0.1.3 - 2022-07-06", "text": "<ul> <li>Update - Diagram links for PyPI README</li> </ul>"}, {"location": "changelog/#012-2022-06-27", "title": "0.1.2 - 2022-06-27", "text": "<ul> <li>Add - Code of Conduct</li> <li>Update - pull subject from parent directory in nwb export</li> <li>Update - for genotyping.BreedingPair part tables, projection from Subject<ul> <li>genotyping.BreedingPair.Mother, change attribute to 'mother'</li> <li>genotyping.BreedingPair.Father, change attribute to 'father'</li> </ul> </li> </ul>"}, {"location": "changelog/#011-2022-05-10", "title": "0.1.1 - 2022-05-10", "text": "<ul> <li>Add - NWB export</li> <li>Update - Shorten subject primary key to varchar(8)</li> <li>Add - Adopt black formatting into code base</li> </ul>"}, {"location": "changelog/#010b0-2021-05-07", "title": "0.1.0b0 - 2021-05-07", "text": "<ul> <li>Update - First beta release</li> </ul>"}, {"location": "changelog/#010a1-2021-05-03", "title": "0.1.0a1 - 2021-05-03", "text": "<ul> <li>Add - GitHub Action release process</li> <li>Add - <code>subject</code> schema</li> <li>Add - <code>genotyping</code> schema</li> </ul>"}, {"location": "citation/", "title": "Citation", "text": "<p>If your work uses DataJoint and DataJoint Elements, please cite the respective Research Resource Identifiers (RRIDs) and manuscripts.</p> <ul> <li>DataJoint for Python or MATLAB<p>- Yatsenko D, Reimer J, Ecker AS, Walker EY, Sinz F, Berens P, Hoenselaar A, Cotton     RJ, Siapas AS, Tolias AS. DataJoint: managing big scientific data using MATLAB or     Python. bioRxiv. 2015 Jan 1:031658. doi: https://doi.org/10.1101/031658</p> <p>- DataJoint (RRID:SCR_014543) -     DataJoint for <code>&lt;Select Python or MATLAB&gt;</code> (version <code>&lt;Enter version number&gt;</code>)</p> </li> </ul> <ul> <li>DataJoint Elements<p>- Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D,     Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for     Neurophysiology. bioRxiv. 2021 Jan 1. doi:     https://doi.org/10.1101/2021.03.30.437358</p> <p>- DataJoint Elements (RRID:SCR_021894) -     Element Animal (version 0.1.5)</p> </li> </ul>"}, {"location": "concepts/", "title": "Concepts", "text": ""}, {"location": "concepts/#usage-of-animal-subjects-in-neuroscience", "title": "Usage of animal subjects in neuroscience", "text": "<p>Many data pipelines in neuroscience retain information about the experimental subjects (e.g., date of birth, sex). For animal models, this can also include owner, cage and sacrificing information. Many researchers also retain genotyping information (e.g., line, zygosity). Labs that perform their own genotyping need to keep track of even more information, such as breeding pairs, litters, and genotyping tests. Element Animal can help researchers organize all this information in connection with a broader experimental pipeline.</p>"}, {"location": "concepts/#key-partnerships", "title": "Key Partnerships", "text": "<p>Over the past few years, several labs have developed DataJoint-based pipelines for animal management. Our team collaborated with several of them during their projects. Additionally, we interviewed these teams to understand their experiment workflow, associated tools, and interfaces. These teams include:</p> <ul> <li>International Brain Laboratory</li> <li>BrainCoGs (Princeton Neuroscience Institute)   (Python / MATLAB)</li> <li>MoC3 (Columbia Zuckerman Institute) + Costa Lab (private repository) + Hillman Lab</li> <li>Sabatini Lab</li> </ul> <p>Through our interviews and direct collaboration with the precursor projects, we identified the common motifs in the animal subject schemas to create the Animal Management Element. This element works for diverse downstream pipelines and is always used in combination with other elements for specific experiments. As such it is validated jointly with the processing elements such as the Array Ephys Element and Calcium Imaging Element.</p>"}, {"location": "concepts/#element-architecture", "title": "Element architecture", "text": "<p>There are three modules in <code>element-animal</code>:</p> <ul> <li>subject: contains the basic information of subject, including Strain, Line, Subject,   Zygosity, and SubjectDeath information</li> </ul> <ul> <li>genotyping: this module is designed for labs that keep track of colony management and   genotyping results, containing information of breeding, weaning, housing, and   genotyping.</li> </ul> <ul> <li>surgery: this module maintains records of subject implantations including, for   example, fiberphotometry.</li> </ul>"}, {"location": "concepts/#subject-diagram", "title": "Subject Diagram", "text": ""}, {"location": "concepts/#genotyping-diagram", "title": "Genotyping Diagram", "text": ""}, {"location": "concepts/#surgery-diagram", "title": "Surgery Diagram", "text": ""}, {"location": "concepts/#subject-schema-api-docs", "title": "<code>subject</code> schema (API docs)", "text": "<ul> <li>Although not required, most choose to connect the <code>Session</code> table to a <code>Subject</code> table.</li> </ul> Table Description Strain Genetic strain of an animal. (e.g. C57Bl/6) Allele Store allele information Line Genetic line Subject Animal subject information SubjectDeath Subject death information SubjectCull Subject culling information Zygosity Information about zygosity of a subject"}, {"location": "concepts/#genotyping-schema-api-docs", "title": "<code>genotyping</code> schema (API docs)", "text": "Table Description Sequence Gene sequence information AlleleSequence Allele sequence information BreedingPair Information about male-female pair used for breeding Litter Information about litter (group of animals born to a breeding pair) Weaning Information about weaning (maternal separation) SubjectLitter Subject and its litter Cage Cage information SubjectCaging Information about subject and its cage. GenotypeTest Information about genotype test"}, {"location": "concepts/#surgery-schema-api-docs", "title": "<code>surgery</code> schema (API docs)", "text": "Table Description CoordinateReference Coordinate reference system BrainRegion Brain region of a given surgery Hemisphere Brain region hemisphere ImplantationType Type of implantation Implantation Implantation of a device"}, {"location": "tutorials/", "title": "Tutorials", "text": "<p>Coming soon!</p>"}, {"location": "api/element_animal/genotyping/", "title": "genotyping.py", "text": ""}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.activate", "title": "<code>activate(genotyping_schema_name, subject_schema_name=None, create_schema=True, create_tables=True, linking_module=None)</code>", "text": "<p>Activate this schema.</p> <p>Parameters:</p> Name Type Description Default <code>genotyping_schema_name</code> <code>str</code> <p>schema name on the database server to                         activate the <code>genotyping</code> element.</p> required <code>subject_schema_name</code> <code>str</code> <p>schema name on the database server to                     activate the <code>subject</code> element</p> <code>None</code> <code>create_schema</code> <code>bool</code> <p>when True (default), create schema in the                 database if it does not yet exist.</p> <code>True</code> <code>create_tables</code> <code>bool</code> <p>when True (default), create tables in the                 database if they do not yet exist.</p> <code>True</code> <code>linking_module</code> <code>bool</code> <p>a module name or a module containing the</p> <code>None</code> <code>required</code> <code>dependencies to activate the `subject` element</code> required <p>Dependencies:</p> Upstream tables <p>Source: The source of the material/resources (e.g. allele, animal) - typically refers to the             vendor (e.g. Jackson Lab - JAX). Lab: The lab for which a particular animal belongs to. Protocol: The protocol applicable to a particular animal (e.g. IACUC, IRB). User: The user associated with a particular animal.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>def activate(\n    genotyping_schema_name,\n    subject_schema_name=None,\n    create_schema=True,\n    create_tables=True,\n    linking_module=None,\n):\n\"\"\"Activate this schema.\n\n    Args:\n        genotyping_schema_name (str): schema name on the database server to\n                                    activate the `genotyping` element.\n        subject_schema_name (str): schema name on the database server to\n                                activate the `subject` element\n        create_schema (bool, optional): when True (default), create schema in the\n                            database if it does not yet exist.\n        create_tables (bool, optional): when True (default), create tables in the\n                            database if they do not yet exist.\n        linking_module (bool, optional): a module name or a module containing the\n        required dependencies to activate the `subject` element:\n\n    Dependencies:\n    Upstream tables:\n        Source: The source of the material/resources (e.g. allele, animal) - typically refers to the\n                    vendor (e.g. Jackson Lab - JAX).\n        Lab: The lab for which a particular animal belongs to.\n        Protocol: The protocol applicable to a particular animal (e.g. IACUC, IRB).\n        User: The user associated with a particular animal.\n    \"\"\"\n    if isinstance(linking_module, str):\n        linking_module = importlib.import_module(linking_module)\n    assert inspect.ismodule(\n        linking_module\n    ), \"The argument 'linking_module' must be a module's name or a module\"\n\n    global _linking_module\n    _linking_module = linking_module\n\n    subject.activate(\n        subject_schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        linking_module=linking_module,\n    )\n    schema.activate(\n        genotyping_schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        add_objects=linking_module.__dict__,\n    )\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.Sequence", "title": "<code>Sequence</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Gene sequence information.</p> <p>Attributes:</p> Name Type Description <code>sequence</code> <code> varchar(32) </code> <p>Abbreviated sequence name</p> <code>base_pairs</code> <code> varchar(1024) </code> <p>Base pairs</p> <code>sequence_desc</code> <code> varchar(255) </code> <p>Description</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>@schema\nclass Sequence(dj.Lookup):\n\"\"\"Gene sequence information.\n\n    Attributes:\n        sequence ( varchar(32) ): Abbreviated sequence name\n        base_pairs ( varchar(1024) ): Base pairs\n        sequence_desc ( varchar(255) ): Description\n    \"\"\"\n\n    definition = \"\"\"\n    sequence            : varchar(32)   # abbreviated sequence name\n    ---\n    base_pairs=''       : varchar(1024) # base pairs\n    sequence_desc=''    : varchar(255)  # description\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.AlleleSequence", "title": "<code>AlleleSequence</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Allele sequence information.</p> <p>Attributes:</p> Name Type Description <code>subject.Allele</code> <code>foreign key</code> <p>subject.Allele key.</p> <code>Sequence</code> <code> varchar(1024) </code> <p>Sequence key.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>@schema\nclass AlleleSequence(dj.Lookup):\n\"\"\"Allele sequence information.\n\n    Attributes:\n        subject.Allele (foreign key): subject.Allele key.\n        Sequence ( varchar(1024) ): Sequence key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; subject.Allele\n    -&gt; Sequence\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.BreedingPair", "title": "<code>BreedingPair</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Information about male-female pair used for breeding.</p> <p>Attributes:</p> Name Type Description <code>breeding_pair</code> <code> varchar(24) </code> <p>Pair identifier.</p> <code>bp_start_date</code> <code>date</code> <p>Optional. Start date of breeding.</p> <code>bp_end_date</code> <code>date</code> <p>Option. End date of breeding.</p> <code>bp_description</code> <code> varchar(2048) </code> <p>Description of the pair.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>@schema\nclass BreedingPair(dj.Manual):\n\"\"\"Information about male-female pair used for breeding.\n\n    Attributes:\n        breeding_pair ( varchar(24) ): Pair identifier.\n        bp_start_date (date): Optional. Start date of breeding.\n        bp_end_date (date): Option. End date of breeding.\n        bp_description ( varchar(2048) ): Description of the pair.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; subject.Line\n    breeding_pair           : varchar(32)\n    ---\n    bp_start_date=null      : date\n    bp_end_date=null        : date\n    bp_description=''       : varchar(2048)\n    \"\"\"\n\n    class Father(dj.Part):\n\"\"\"Information about male breeder.\n\n        Attributes:\n            BreedingPair (foreign key): BreedingPair key.\n            subject.Subject (foreign key): subject.Subject key.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        ---\n        -&gt; subject.Subject.proj(father=\"subject\")\n        \"\"\"\n\n    class Mother(dj.Part):\n\"\"\"Information about female breeder.\n\n        Attributes:\n            BreedingPair (foreign key): BreedingPair key.\n            subject.Subject (foreign key): subject.Subject key.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        ---\n        -&gt; subject.Subject.proj(mother=\"subject\")\n        \"\"\"\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.BreedingPair.Father", "title": "<code>Father</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Information about male breeder.</p> <p>Attributes:</p> Name Type Description <code>BreedingPair</code> <code>foreign key</code> <p>BreedingPair key.</p> <code>subject.Subject</code> <code>foreign key</code> <p>subject.Subject key.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>class Father(dj.Part):\n\"\"\"Information about male breeder.\n\n    Attributes:\n        BreedingPair (foreign key): BreedingPair key.\n        subject.Subject (foreign key): subject.Subject key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    ---\n    -&gt; subject.Subject.proj(father=\"subject\")\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.BreedingPair.Mother", "title": "<code>Mother</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Information about female breeder.</p> <p>Attributes:</p> Name Type Description <code>BreedingPair</code> <code>foreign key</code> <p>BreedingPair key.</p> <code>subject.Subject</code> <code>foreign key</code> <p>subject.Subject key.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>class Mother(dj.Part):\n\"\"\"Information about female breeder.\n\n    Attributes:\n        BreedingPair (foreign key): BreedingPair key.\n        subject.Subject (foreign key): subject.Subject key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    ---\n    -&gt; subject.Subject.proj(mother=\"subject\")\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.Litter", "title": "<code>Litter</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Information about litter (group of animals born to a breeding pair).</p> <p>Attributes:</p> Name Type Description <code>BreedingPair</code> <code>foreign key</code> <p>BreedingPair key.</p> <code>litter_birth_date</code> <code>date</code> <p>Birth date of litter.</p> <code>num_of_pups</code> <code>tinyint</code> <p>Number of animals in the litter.</p> <code>litter_notes</code> <code> varchar(255) </code> <p>Notes about the litter.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>@schema\nclass Litter(dj.Manual):\n\"\"\"Information about litter (group of animals born to a breeding pair).\n\n    Attributes:\n        BreedingPair (foreign key): BreedingPair key.\n        litter_birth_date (date): Birth date of litter.\n        num_of_pups (tinyint): Number of animals in the litter.\n        litter_notes ( varchar(255) ): Notes about the litter.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; BreedingPair\n    litter_birth_date       : date\n    ---\n    num_of_pups             : tinyint\n    litter_notes=''         : varchar(255)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.Weaning", "title": "<code>Weaning</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Information about weaning (maternal separation).</p> <p>Attributes:</p> Name Type Description <code>Litter</code> <code>foreign key</code> <p>Litter key.</p> <code>weaning_date</code> <code>date</code> <p>Litter key.</p> <code>num_of_male</code> <code>tinyint</code> <p>Number of males.</p> <code>num_of_female</code> <code>tinyint</code> <p>Number of females.</p> <code>weaning_notes</code> <code> varchar(255) </code> <p>Notes about weaning.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>@schema\nclass Weaning(dj.Manual):\n\"\"\"Information about weaning (maternal separation).\n\n    Attributes:\n        Litter (foreign key): Litter key.\n        weaning_date (date): Litter key.\n        num_of_male (tinyint): Number of males.\n        num_of_female (tinyint): Number of females.\n        weaning_notes ( varchar(255) ): Notes about weaning.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Litter\n    ---\n    weaning_date            : date\n    num_of_male             : tinyint\n    num_of_female           : tinyint\n    weaning_notes=''        : varchar(255)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.SubjectLitter", "title": "<code>SubjectLitter</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Subject and its litter.</p> <p>Attributes:</p> Name Type Description <code>subject.Subject</code> <code>foreign key</code> <p>subject.Subject key.</p> <code>Litter</code> <code>foreign key</code> <p>Litter key.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>@schema\nclass SubjectLitter(dj.Manual):\n\"\"\"Subject and its litter.\n\n    Attributes:\n        subject.Subject (foreign key): subject.Subject key.\n        Litter (foreign key): Litter key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; subject.Subject\n    ---\n    -&gt; Litter\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.Cage", "title": "<code>Cage</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Cage information.</p> <p>Attributes:</p> Name Type Description <code>cage</code> <code> varchar(32) </code> <p>Cage identifier.</p> <code>cage_purpose</code> <code> varchar(128) </code> <p>Cage purpose.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>@schema\nclass Cage(dj.Lookup):\n\"\"\"Cage information.\n\n    Attributes:\n        cage ( varchar(32) ): Cage identifier.\n        cage_purpose ( varchar(128) ): Cage purpose.\n    \"\"\"\n\n    definition = \"\"\"\n    cage            : varchar(32)   # cage identifier\n    ---\n    cage_purpose='' : varchar(128)  # cage purpose\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.SubjectCaging", "title": "<code>SubjectCaging</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Information about subject and its cage.</p> <p>Attributes:</p> Name Type Description <code>subject.Subject</code> <code>foreign key</code> <p>subject.Subject key.</p> <code>caging_datetime</code> <code>datetime</code> <p>Date of cage entry.</p> <code>Cage</code> <code>foreign key</code> <p>Cage key.</p> <code>User</code> <code>foreign key</code> <p>User key.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>@schema\nclass SubjectCaging(dj.Manual):\n\"\"\"Information about subject and its cage.\n\n    Attributes:\n        subject.Subject (foreign key): subject.Subject key.\n        caging_datetime (datetime): Date of cage entry.\n        Cage (foreign key): Cage key.\n        User (foreign key): User key.\n    \"\"\"\n\n    definition = \"\"\"\n    # record of animal caging\n    -&gt; subject.Subject\n    caging_datetime     : datetime   # date of cage entry\n    ---\n    -&gt; Cage\n    -&gt; User           # person associated with the cage transfer\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/genotyping/#element_animal.genotyping.GenotypeTest", "title": "<code>GenotypeTest</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Information about genotype test.</p> <p>Attributes:</p> Name Type Description <code>subject.Subject</code> <code>foreign key</code> <p>subject.Subject key.</p> <code>Sequence</code> <code>foreign key</code> <p>Sequence key.</p> <code>genotype_test_id</code> <code>datetime</code> <p>Identifier of a genotype test.</p> <code>test_result</code> <code>Present or Absent</code> <p>Test result.</p> Source code in <code>element_animal/genotyping.py</code> <pre><code>@schema\nclass GenotypeTest(dj.Manual):\n\"\"\"Information about genotype test.\n\n    Attributes:\n        subject.Subject (foreign key): subject.Subject key.\n        Sequence (foreign key): Sequence key.\n        genotype_test_id (datetime): Identifier of a genotype test.\n        test_result (Present or Absent): Test result.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; subject.Subject\n    -&gt; Sequence\n    genotype_test_id    : varchar(32)    # identifier of a genotype test\n    ---\n    test_result         : enum(\"Present\", \"Absent\")     # test result\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/", "title": "subject.py", "text": ""}, {"location": "api/element_animal/subject/#element_animal.subject.activate", "title": "<code>activate(schema_name, *, create_schema=True, create_tables=True, linking_module=True)</code>", "text": "<p>Activate this schema.</p> <p>Parameters:</p> Name Type Description Default <code>schema_name</code> <code>str</code> <p>schema name on the database server to activate the             <code>subject</code> element</p> required <code>create_schema</code> <code>bool</code> <p>when True (default), create schema in the                 database if it does not yet exist.</p> <code>True</code> <code>create_tables</code> <code>bool</code> <p>when True (default), create tables in the                 database if they do not yet exist.</p> <code>True</code> <code>linking_module</code> <code>bool</code> <p>a module name or a module containing the</p> <code>True</code> <code>required</code> <code>dependencies to activate the `subject` element</code> required <p>Dependencies:</p> Upstream tables <p>Source: The source of the material/resources             (e.g. allele, animal) - typically refers to the             vendor (e.g. Jackson Lab - JAX) Lab: The lab for which a particular animal belongs to Protocol: the protocol applicable to a particular animal             (e.g. IACUC, IRB) User: the user associated with a particular animal</p> Source code in <code>element_animal/subject.py</code> <pre><code>def activate(\n    schema_name: str,\n    *,\n    create_schema: bool = True,\n    create_tables: bool = True,\n    linking_module: bool = True\n):\n\"\"\"Activate this schema.\n\n    Args:\n        schema_name (str): schema name on the database server to activate the\n                        `subject` element\n        create_schema (bool): when True (default), create schema in the\n                            database if it does not yet exist.\n        create_tables (bool): when True (default), create tables in the\n                            database if they do not yet exist.\n        linking_module (bool): a module name or a module containing the\n        required dependencies to activate the `subject` element:\n\n    Dependencies:\n    Upstream tables:\n        Source: The source of the material/resources\n                    (e.g. allele, animal) - typically refers to the\n                    vendor (e.g. Jackson Lab - JAX)\n        Lab: The lab for which a particular animal belongs to\n        Protocol: the protocol applicable to a particular animal\n                    (e.g. IACUC, IRB)\n        User: the user associated with a particular animal\n    \"\"\"\n\n    if isinstance(linking_module, str):\n        linking_module = importlib.import_module(linking_module)\n    assert inspect.ismodule(\n        linking_module\n    ), \"The argument 'linking_module' must be a module's name or a module\"\n\n    global _linking_module\n    _linking_module = linking_module\n\n    schema.activate(\n        schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        add_objects=linking_module.__dict__,\n    )\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Strain", "title": "<code>Strain</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Genetic strain of an animal. (e.g. C57Bl/6).</p> <p>Attributes:</p> Name Type Description <code>strain</code> <code> varchar(32) </code> <p>Abbreviated strain name.</p> <code>strain_standard_name</code> <code> varchar(32) </code> <p>Formal name of a strain.</p> <code>strain_desc</code> <code> varchar(255) </code> <p>Optional. Description of this strain.</p> Source code in <code>element_animal/subject.py</code> <pre><code>@schema\nclass Strain(dj.Lookup):\n\"\"\"Genetic strain of an animal. (e.g. C57Bl/6).\n\n    Attributes:\n        strain ( varchar(32) ): Abbreviated strain name.\n        strain_standard_name ( varchar(32) ): Formal name of a strain.\n        strain_desc ( varchar(255) ): Optional. Description of this strain.\n    \"\"\"\n\n    definition = \"\"\"\n    strain                  : varchar(32)\t# abbreviated strain name\n    ---\n    strain_standard_name    : varchar(32)   # formal name of a strain\n    strain_desc=''          : varchar(255)\t# description of this strain\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Allele", "title": "<code>Allele</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Store allele information.</p> <p>Attributes:</p> Name Type Description <code>allele</code> <code> varchar(32) </code> <p>Abbreviated allele name.</p> <code>allele_standard_name</code> <code> varchar(255) </code> <p>Optional. Standard name of an allele.</p> Source code in <code>element_animal/subject.py</code> <pre><code>@schema\nclass Allele(dj.Lookup):\n\"\"\"Store allele information.\n\n    Attributes:\n        allele ( varchar(32) ): Abbreviated allele name.\n        allele_standard_name ( varchar(255) ): Optional. Standard name of an allele.\n    \"\"\"\n\n    definition = \"\"\"\n    allele                    : varchar(32)  # abbreviated allele name\n    ---\n    allele_standard_name=''   : varchar(255) # standard name of an allele\n    \"\"\"\n\n    class Source(dj.Part):\n\"\"\"Source of an allele.\n\n        Attributes:\n            Allele (foreign key): Allele key.\n            source_identifier ( varchar(255) ): ID of the provider.\n            source_url ( varchar(255) ): Optional. URL to the source information\n            expression_data_url ( varchar(255) ): Optional. Link to the expression pattern from Allen institute brain atlas.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        ---\n        -&gt; Source\n        source_identifier=''  : varchar(255)\n        source_url=''         : varchar(255) # link to the line information\n        expression_data_url='': varchar(255) # link to the expression pattern from Allen institute brain atlas\n        \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Allele.Source", "title": "<code>Source</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Source of an allele.</p> <p>Attributes:</p> Name Type Description <code>Allele</code> <code>foreign key</code> <p>Allele key.</p> <code>source_identifier</code> <code> varchar(255) </code> <p>ID of the provider.</p> <code>source_url</code> <code> varchar(255) </code> <p>Optional. URL to the source information</p> <code>expression_data_url</code> <code> varchar(255) </code> <p>Optional. Link to the expression pattern from Allen institute brain atlas.</p> Source code in <code>element_animal/subject.py</code> <pre><code>class Source(dj.Part):\n\"\"\"Source of an allele.\n\n    Attributes:\n        Allele (foreign key): Allele key.\n        source_identifier ( varchar(255) ): ID of the provider.\n        source_url ( varchar(255) ): Optional. URL to the source information\n        expression_data_url ( varchar(255) ): Optional. Link to the expression pattern from Allen institute brain atlas.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    ---\n    -&gt; Source\n    source_identifier=''  : varchar(255)\n    source_url=''         : varchar(255) # link to the line information\n    expression_data_url='': varchar(255) # link to the expression pattern from Allen institute brain atlas\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Line", "title": "<code>Line</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Genetic line.</p> <p>Attributes:</p> Name Type Description <code>line</code> <code> varchar(32) </code> <p>Abbreviated name for the line.</p> <code>species</code> <code> varchar(64) </code> <p>Latin name preferred for NWB export.</p> <code>line_description</code> <code> varchar(2000) </code> <p>Optional. Description of the line.</p> <code>target_phenotype</code> <code> varchar(255) </code> <p>Optional. Targeted gene phenotype.</p> <code>is_active</code> <code>boolean) </code> <p>Whether the line is in active breeding.</p> Source code in <code>element_animal/subject.py</code> <pre><code>@schema\nclass Line(dj.Lookup):\n\"\"\"Genetic line.\n\n    Attributes:\n        line ( varchar(32) ): Abbreviated name for the line.\n        species ( varchar(64) ): Latin name preferred for NWB export.\n        line_description ( varchar(2000) ): Optional. Description of the line.\n        target_phenotype ( varchar(255) ): Optional. Targeted gene phenotype.\n        is_active (boolean) : Whether the line is in active breeding.\n    \"\"\"\n\n    definition = \"\"\"\n    line                : varchar(32)  # abbreviated name for the line\n    ---\n    species=''          : varchar(64)  # Latin name preferred for NWB export\n    line_description='' : varchar(2000)\n    target_phenotype='' : varchar(255)\n    is_active           : boolean\t   # whether the line is in active breeding\n    \"\"\"\n\n    class Allele(dj.Part):\n\"\"\"Allele of the line.\n\n        Attributes:\n            Line (foreign key): Line key.\n            Allele (foreign key): Allele key.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        -&gt; Allele\n        \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Line.Allele", "title": "<code>Allele</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Allele of the line.</p> <p>Attributes:</p> Name Type Description <code>Line</code> <code>foreign key</code> <p>Line key.</p> <code>Allele</code> <code>foreign key</code> <p>Allele key.</p> Source code in <code>element_animal/subject.py</code> <pre><code>class Allele(dj.Part):\n\"\"\"Allele of the line.\n\n    Attributes:\n        Line (foreign key): Line key.\n        Allele (foreign key): Allele key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    -&gt; Allele\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject", "title": "<code>Subject</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Animal subject information.</p> <p>Attributes:</p> Name Type Description <code>subject</code> <code> varchar(8) </code> <p>Subject ID.</p> <code>subject_nickname</code> <code> varchar(8) </code> <p>Subject nickname.</p> <code>sex</code> <code>enum</code> <p>'M', 'F', or 'U'; Male, Female, or Unknown.</p> <code>subject_birth_date</code> <code>date</code> <p>Birth date of the subject.</p> <code>subject_description</code> <code> varchar(1024) </code> <p>Description of the subject.</p> Source code in <code>element_animal/subject.py</code> <pre><code>@schema\nclass Subject(dj.Manual):\n\"\"\"Animal subject information.\n\n    Attributes:\n        subject ( varchar(8) ): Subject ID.\n        subject_nickname ( varchar(8) ): Subject nickname.\n        sex (enum): 'M', 'F', or 'U'; Male, Female, or Unknown.\n        subject_birth_date (date): Birth date of the subject.\n        subject_description ( varchar(1024) ): Description of the subject.\n    \"\"\"\n\n    definition = \"\"\"\n    subject                 : varchar(8)\n    ---\n    subject_nickname=''     : varchar(64)\n    sex                     : enum('M', 'F', 'U')\n    subject_birth_date      : date\n    subject_description=''  : varchar(1024)\n    \"\"\"\n\n    class Protocol(dj.Part):\n\"\"\"Protocol under which this subject animal is used.\n\n        Attributes:\n            Subject (foreign key): Subject key.\n            Protocol (foreign key): Protocol key.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        -&gt; Protocol\n        \"\"\"\n\n    class User(dj.Part):\n\"\"\"Individual responsible for experiment or management of the subject.\n\n        Attributes:\n            Subject (foreign key): Subject key.\n            User (foreign key): User key.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        -&gt; User\n        \"\"\"\n\n    class Line(dj.Part):\n\"\"\"Genetic line of the subject.\n\n        Attributes:\n            Subject (foreign key): Subject key.\n            Line (foreign key): Line key.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        ---\n        -&gt; Line\n        \"\"\"\n\n    class Strain(dj.Part):\n\"\"\"Genetic strain of the subject.\n\n        Attributes:\n            Subject (foreign key): Subject key.\n            Strain (foreign key): Strain key.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        ---\n        -&gt; Strain\n        \"\"\"\n\n    class Source(dj.Part):\n\"\"\"Source (e.g., vendor) of the subject.\n\n        Attributes:\n            Subject (foreign key): Subject key.\n            Source (foreign key): Source key.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        ---\n        -&gt; Source\n        \"\"\"\n\n    class Lab(dj.Part):\n\"\"\"Lab where the subject belongs.\n\n        Attributes:\n            Subject (foreign key): Subject key.\n            Lab (foreign key): Lab key.\n            subject_alias ( varchar(32) ): Alias for lab if different from id.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        -&gt; Lab\n        ---\n        subject_alias='' : varchar(32) # alias for lab if different from id.\n        \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.Protocol", "title": "<code>Protocol</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Protocol under which this subject animal is used.</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Subject key.</p> <code>Protocol</code> <code>foreign key</code> <p>Protocol key.</p> Source code in <code>element_animal/subject.py</code> <pre><code>class Protocol(dj.Part):\n\"\"\"Protocol under which this subject animal is used.\n\n    Attributes:\n        Subject (foreign key): Subject key.\n        Protocol (foreign key): Protocol key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    -&gt; Protocol\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.User", "title": "<code>User</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Individual responsible for experiment or management of the subject.</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Subject key.</p> <code>User</code> <code>foreign key</code> <p>User key.</p> Source code in <code>element_animal/subject.py</code> <pre><code>class User(dj.Part):\n\"\"\"Individual responsible for experiment or management of the subject.\n\n    Attributes:\n        Subject (foreign key): Subject key.\n        User (foreign key): User key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    -&gt; User\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.Line", "title": "<code>Line</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Genetic line of the subject.</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Subject key.</p> <code>Line</code> <code>foreign key</code> <p>Line key.</p> Source code in <code>element_animal/subject.py</code> <pre><code>class Line(dj.Part):\n\"\"\"Genetic line of the subject.\n\n    Attributes:\n        Subject (foreign key): Subject key.\n        Line (foreign key): Line key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    ---\n    -&gt; Line\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.Strain", "title": "<code>Strain</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Genetic strain of the subject.</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Subject key.</p> <code>Strain</code> <code>foreign key</code> <p>Strain key.</p> Source code in <code>element_animal/subject.py</code> <pre><code>class Strain(dj.Part):\n\"\"\"Genetic strain of the subject.\n\n    Attributes:\n        Subject (foreign key): Subject key.\n        Strain (foreign key): Strain key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    ---\n    -&gt; Strain\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.Source", "title": "<code>Source</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Source (e.g., vendor) of the subject.</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Subject key.</p> <code>Source</code> <code>foreign key</code> <p>Source key.</p> Source code in <code>element_animal/subject.py</code> <pre><code>class Source(dj.Part):\n\"\"\"Source (e.g., vendor) of the subject.\n\n    Attributes:\n        Subject (foreign key): Subject key.\n        Source (foreign key): Source key.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    ---\n    -&gt; Source\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Subject.Lab", "title": "<code>Lab</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Lab where the subject belongs.</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Subject key.</p> <code>Lab</code> <code>foreign key</code> <p>Lab key.</p> <code>subject_alias</code> <code> varchar(32) </code> <p>Alias for lab if different from id.</p> Source code in <code>element_animal/subject.py</code> <pre><code>class Lab(dj.Part):\n\"\"\"Lab where the subject belongs.\n\n    Attributes:\n        Subject (foreign key): Subject key.\n        Lab (foreign key): Lab key.\n        subject_alias ( varchar(32) ): Alias for lab if different from id.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    -&gt; Lab\n    ---\n    subject_alias='' : varchar(32) # alias for lab if different from id.\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.SubjectDeath", "title": "<code>SubjectDeath</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Subject death information.</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Subject key.</p> <code>date_date</code> <code>date) </code> <p>Death date.</p> Source code in <code>element_animal/subject.py</code> <pre><code>@schema\nclass SubjectDeath(dj.Manual):\n\"\"\"Subject death information.\n\n    Attributes:\n        Subject (foreign key): Subject key.\n        date_date (date) : Death date.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Subject\n    ---\n    death_date  : date       # death date\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.SubjectCull", "title": "<code>SubjectCull</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Subject culling information.</p> <p>Attributes:</p> Name Type Description <code>SubjectDeath</code> <code>foreign key</code> <p>SubjectDeath key.</p> <code>cull_method</code> <code> varchar(255) </code> <p>Optional. Culling method (e.g., cervical dislocation)</p> <code>cull_reason</code> <code> varchar(255) </code> <p>Optional. Reason for culling.</p> <code>cull_notes</code> <code> varchar(1000) </code> <p>Optional. Description of the culling.</p> Source code in <code>element_animal/subject.py</code> <pre><code>@schema\nclass SubjectCull(dj.Manual):\n\"\"\"Subject culling information.\n\n    Attributes:\n        SubjectDeath (foreign key): SubjectDeath key.\n        cull_method ( varchar(255) ): Optional. Culling method (e.g., cervical dislocation)\n        cull_reason ( varchar(255) ): Optional. Reason for culling.\n        cull_notes ( varchar(1000) ): Optional. Description of the culling.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; SubjectDeath\n    ---\n    cull_method='': varchar(255)\n    cull_reason='': varchar(255)\n    cull_notes='' : varchar(1000)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/subject/#element_animal.subject.Zygosity", "title": "<code>Zygosity</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Information about zygosity of a subject.</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Subject key.</p> <code>Allele</code> <code>foreign key</code> <p>Allele key.</p> <code>zygosity</code> <code>Present or Absent or Homozygous or Heterozygous</code> <p>Similarity of an allele.</p> Source code in <code>element_animal/subject.py</code> <pre><code>@schema\nclass Zygosity(dj.Manual):\n\"\"\"Information about zygosity of a subject.\n\n    Attributes:\n        Subject (foreign key): Subject key.\n        Allele (foreign key): Allele key.\n        zygosity (Present or Absent or Homozygous or Heterozygous): Similarity of an allele.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Subject\n    -&gt; Allele\n    ---\n    zygosity : enum(\"Present\", \"Absent\", \"Homozygous\", \"Heterozygous\")\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/surgery/", "title": "surgery.py", "text": ""}, {"location": "api/element_animal/surgery/#element_animal.surgery.activate", "title": "<code>activate(surgery_schema_name, subject_schema_name=None, *, create_schema=True, create_tables=True, linking_module=True)</code>", "text": "<p>Activate this schema.</p> <p>Parameters:</p> Name Type Description Default <code>schema_name</code> <code>str</code> <p>schema name on the database server to activate the             <code>subject</code> element</p> required <code>create_schema</code> <code>bool</code> <p>when True (default), create schema in the                 database if it does not yet exist.</p> <code>True</code> <code>create_tables</code> <code>bool</code> <p>when True (default), create tables in the                 database if they do not yet exist.</p> <code>True</code> <code>linking_module</code> <code>bool</code> <p>a module name or a module containing the</p> <code>True</code> <code>required</code> <code>dependencies to activate the `subject` element</code> required <p>Dependencies:</p> Upstream tables <p>User: the who conducted a particular surgery/implantation</p> Source code in <code>element_animal/surgery.py</code> <pre><code>def activate(\n    surgery_schema_name: str,\n    subject_schema_name: str = None,\n    *,\n    create_schema: bool = True,\n    create_tables: bool = True,\n    linking_module: bool = True\n):\n\"\"\"Activate this schema.\n\n    Args:\n        schema_name (str): schema name on the database server to activate the\n                        `subject` element\n        create_schema (bool): when True (default), create schema in the\n                            database if it does not yet exist.\n        create_tables (bool): when True (default), create tables in the\n                            database if they do not yet exist.\n        linking_module (bool): a module name or a module containing the\n        required dependencies to activate the `subject` element:\n\n    Dependencies:\n    Upstream tables:\n        User: the who conducted a particular surgery/implantation\n    \"\"\"\n\n    if isinstance(linking_module, str):\n        linking_module = importlib.import_module(linking_module)\n    assert inspect.ismodule(\n        linking_module\n    ), \"The argument 'linking_module' must be a module's name or a module\"\n\n    global _linking_module\n    _linking_module = linking_module\n\n    subject.activate(\n        subject_schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        linking_module=linking_module,\n    )\n    schema.activate(\n        surgery_schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        add_objects=linking_module.__dict__,\n    )\n</code></pre>"}, {"location": "api/element_animal/surgery/#element_animal.surgery.CoordinateReference", "title": "<code>CoordinateReference</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Coordinate reference system</p> <p>Attributes:</p> Name Type Description <code>reference</code> <code> varchar(60) </code> <p>Reference system (e.g., bregma, lambda, etc.)</p> Source code in <code>element_animal/surgery.py</code> <pre><code>@schema\nclass CoordinateReference(dj.Lookup):\n\"\"\"Coordinate reference system\n\n    Attributes:\n        reference ( varchar(60) ): Reference system (e.g., bregma, lambda, etc.)\n    \"\"\"\n\n    definition = \"\"\"\n    reference   : varchar(32)\n    \"\"\"\n    contents = zip(\n        [\"bregma\", \"lambda\", \"dura\", \"skull_surface\", \"sagittal_suture\", \"sinus\"]\n    )\n</code></pre>"}, {"location": "api/element_animal/surgery/#element_animal.surgery.BrainRegion", "title": "<code>BrainRegion</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Brain region of a given surgery</p> <p>Attributes:</p> Name Type Description <code>region_acronym</code> <code> varchar(32) ) </code> <p>Brain region shorthand</p> <code>region_name</code> <code> varchar(128) ) </code> <p>Brain region full name</p> Source code in <code>element_animal/surgery.py</code> <pre><code>@schema\nclass BrainRegion(dj.Manual):\n\"\"\"Brain region of a given surgery\n\n    Attributes:\n        region_acronym ( varchar(32) ) : Brain region shorthand\n        region_name ( varchar(128) ) : Brain region full name\n    \"\"\"\n\n    definition = \"\"\"\n    region_acronym : varchar(32)   # Brain region shorthand\n    ---\n    region_name    : varchar(256)  # Brain region full name\n    \"\"\"\n</code></pre>"}, {"location": "api/element_animal/surgery/#element_animal.surgery.Hemisphere", "title": "<code>Hemisphere</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Brain region hemisphere</p> <p>Attributes:</p> Name Type Description <code>hemisphere</code> <code> varchar(8) </code> <p>Brain region hemisphere (e.g., left, right, middle)</p> Source code in <code>element_animal/surgery.py</code> <pre><code>@schema\nclass Hemisphere(dj.Lookup):\n\"\"\"Brain region hemisphere\n\n    Attributes:\n        hemisphere ( varchar(8) ): Brain region hemisphere (e.g., left, right, middle)\n    \"\"\"\n\n    definition = \"\"\"\n    hemisphere: varchar(8) # Brain region hemisphere\n    \"\"\"\n\n    contents = zip([\"left\", \"right\", \"middle\"])\n</code></pre>"}, {"location": "api/element_animal/surgery/#element_animal.surgery.ImplantationType", "title": "<code>ImplantationType</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Type of implantation</p> <p>Attributes:</p> Name Type Description <code>implant_type</code> <code> varchar(16) </code> <p>Short name for type of implanted device</p> <code>implant_description</code> <code> varchar(32) </code> <p>Full description for implanted device</p> Source code in <code>element_animal/surgery.py</code> <pre><code>@schema\nclass ImplantationType(dj.Lookup):\n\"\"\"Type of implantation\n\n    Attributes:\n        implant_type ( varchar(16) ): Short name for type of implanted device\n        implant_description ( varchar(32) ): Full description for implanted device\n    \"\"\"\n\n    definition = \"\"\"\n    implant_type        : varchar(16) # Short name for type of implanted device\n    ---\n    implant_description : varchar(32) # Full description for implanted device\n    \"\"\"\n\n    contents = (\n        (\"ephys\", \"electophysiology\"),\n        (\"fiber\", \"fiber photometry\"),\n        (\"opto\", \"optogenetic perturbation\"),\n    )\n</code></pre>"}, {"location": "api/element_animal/surgery/#element_animal.surgery.Implantation", "title": "<code>Implantation</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Implantation of a device</p> <p>WRT: With Respect To</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Session primary key</p> <code>location_id</code> <code>int</code> <p>ID of of brain location</p> <code>ap</code> <code> float </code> <p>In mm, Anterior/posterior; Anterior Positive</p> <code>ap_reference</code> <code>projected attribute</code> <p>Coordinate reference</p> <code>ml</code> <code> float </code> <p>In mm, medial axis; Right Positive</p> <code>ml_reference</code> <code>projected attribute</code> <p>Coordinate reference</p> <code>dv</code> <code> float </code> <p>In mm, dorso-ventral axis. Ventral negative</p> <code>dv_reference</code> <code>projected attribute</code> <p>Coordinate reference</p> <code>theta</code> <code> float, nullable </code> <p>Elevation in degrees. Rotation about ml-axis [0, 180] WRT Z</p> <code>phi</code> <code> float, nullable </code> <p>Azimuth in degrees. Rotations about dv-axis [0, 360] WRT X</p> <code>beta</code> <code> float, nullable </code> <p>Rotation about shank in degrees. Rotation about the shank [-180, 180]. Clockwise is increasing. 0 is the probe-front facing anterior</p> Source code in <code>element_animal/surgery.py</code> <pre><code>@schema\nclass Implantation(dj.Manual):\n\"\"\"Implantation of a device\n\n    WRT: With Respect To\n\n    Attributes:\n        Session (foreign key): Session primary key\n        location_id (int): ID of of brain location\n        ap ( float ): In mm, Anterior/posterior; Anterior Positive\n        ap_reference (projected attribute): Coordinate reference\n        ml ( float ): In mm, medial axis; Right Positive\n        ml_reference (projected attribute): Coordinate reference\n        dv ( float ): In mm, dorso-ventral axis. Ventral negative\n        dv_reference (projected attribute): Coordinate reference\n        theta ( float, nullable ): Elevation in degrees.\n            Rotation about ml-axis [0, 180] WRT Z\n        phi ( float, nullable ): Azimuth in degrees.\n            Rotations about dv-axis [0, 360] WRT X\n        beta ( float, nullable ): Rotation about shank in degrees.\n            Rotation about the shank [-180, 180]. Clockwise is increasing.\n            0 is the probe-front facing anterior\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; subject.Subject\n    implant_date        : datetime       # surgery date\n    -&gt; ImplantationType\n    -&gt; BrainRegion.proj(target_region='region_acronym')\n    -&gt; Hemisphere.proj(target_hemisphere='hemisphere')\n    ---\n    -&gt; User.proj(surgeon='user')         # surgeon\n    implant_comment=''  : varchar(1024) # Comments about the implant\n    \"\"\"\n\n    class Coordinate(dj.Part):\n        definition = \"\"\"\n        -&gt; master\n        ---\n        ap=null       : float  # (mm) anterior-posterior; ref is 0\n        -&gt; [nullable] CoordinateReference.proj(ap_ref='reference')\n        ml=null       : float  # (mm) medial axis; ref is 0\n        -&gt; [nullable] CoordinateReference.proj(ml_ref='reference')\n        dv=null       : float  # (mm) dorso-ventral axis; ventral negative\n        -&gt; [nullable] CoordinateReference.proj(dv_ref='reference')\n        theta=null    : float  # (deg) rot about ml-axis [0, 180] wrt z\n        phi=null      : float  # (deg) rot about dv-axis [0, 360] wrt x\n        beta=null     : float  # (deg) rot about shank [-180, 180] wrt anterior\n        \"\"\"\n</code></pre>"}, {"location": "api/element_animal/version/", "title": "version.py", "text": "<p>Package metadata.</p>"}, {"location": "api/element_animal/export/nwb/", "title": "nwb.py", "text": ""}, {"location": "api/element_animal/export/nwb/#element_animal.export.nwb.subject_to_nwb", "title": "<code>subject_to_nwb(session_key)</code>", "text": "<p>Generate a dictionary object containing subject information.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>dict</code> <p>Key specifying one entry in element_animal.subject.Subject</p> required <p>Returns:</p> Type Description <p>pynwb.file.Subject: NWB object</p> Source code in <code>element_animal/export/nwb.py</code> <pre><code>def subject_to_nwb(session_key: dict):\n\"\"\"Generate a dictionary object containing subject information.\n\n    Args:\n        session_key (dict): Key specifying one entry in element_animal.subject.Subject\n\n    Returns:\n        pynwb.file.Subject: NWB object\n    \"\"\"\n    subject_query = subject.Subject &amp; session_key\n    subject_query = subject_query.join(subject.Subject.Line, left=True)\n    subject_query = subject_query.join(subject.Subject.Strain, left=True)\n    subject_query = subject_query.join(subject.Subject.Source, left=True)\n    subject_info = subject_query.fetch1()\n\n    return pynwb.file.Subject(\n        subject_id=subject_info[\"subject\"],\n        sex=subject_info[\"sex\"],\n        date_of_birth=datetime.combine(\n            subject_info[\"subject_birth_date\"],\n            datetime.strptime(\"00:00:00\", \"%H:%M:%S\").time(),\n        ),\n        description=json.dumps(subject_info, default=str),\n        species=str((subject.Line &amp; subject_query).fetch(\"species\")),\n        genotype=\" x \".join(\n            (subject.Line.Allele * subject.Subject.Line &amp; subject_query).fetch(\"allele\")\n        ),\n    )\n</code></pre>"}]}